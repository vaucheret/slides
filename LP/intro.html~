<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Lenguajes Declarativos</title>
<meta name="author" content="(Claudio Vaucheret)"/>
<style type="text/css">
.underline { text-decoration: underline; }
</style>
<link rel="stylesheet" href="../reveal.js-master/css/reveal.css"/>

<link rel="stylesheet" href="../reveal.js-master/css/theme/solarized.css" id="theme"/>


<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
    if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '../reveal.js-master/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    }
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
</head>
<body>
<div class="reveal">
<div class="slides">
<section id="sec-title-slide" data-background="" data-background-size="" data-background-repeat="" data-background-transition=""><h1 class="title">Lenguajes Declarativos</h1><h2 class="author">Claudio Vaucheret</h2><h2 class="date">2018-03-19 lun 00:00</h2><p class="date">Created: 2018-03-19 lun 09:31</p>
</section>
<section id="table-of-contents">
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#/slide-org24a7cfa">Lenguajes Declarativos</a>
<ul>
<li><a href="#/slide-orgcdf8ef0">Características</a></li>
<li><a href="#/slide-orgad32929">Lenguajes</a></li>
</ul>
</li>
<li><a href="#/slide-orgb3f5f71">Prolog</a>
<ul>
<li><a href="#/slide-org5ed4060">Programación en Lógica</a></li>
<li><a href="#/slide-org71b88a0">Ejemplo fibonacci</a>
<ul>
<li><a href="#/slide-orgd7c9e78">sucesion de fibonacci</a></li>
<li><a href="#/slide-org7d5c08d">Conejos</a></li>
<li><a href="#/slide-org0aa6fca">programa</a></li>
</ul>
</li>
<li><a href="#/slide-org4a50d2f">Sintaxis</a>
<ul>
<li><a href="#/slide-orgc1770c3">Atomos</a></li>
<li><a href="#/slide-orgaef00fe">Números</a></li>
<li><a href="#/slide-orgd118611">Variables</a></li>
<li><a href="#/slide-org2d35476">Términos Complejos</a></li>
</ul>
</li>
<li><a href="#/slide-org2f21ee0">Listas</a></li>
<li><a href="#/slide-org4e35227">Ejemplo Autómata Finito</a>
<ul>
<li><a href="#/slide-org5fa804e">Código</a></li>
<li><a href="#/slide-org93a7644">Código</a></li>
<li><a href="#/slide-org0c5ce26">Código</a></li>
<li><a href="#/slide-org2ae3183">Arbol SLD</a></li>
<li><a href="#/slide-org3ad1722">Arbol SLD</a></li>
<li><a href="#/slide-orga390dd5">Arbol SLD</a></li>
<li><a href="#/slide-orga0efdd4">Arbol SLD</a></li>
<li><a href="#/slide-org0c9effc">Arbol SLD</a></li>
<li><a href="#/slide-org6646206">\(Tp^n\)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>
</section>

<section>
<section id="slide-org24a7cfa">
<div class="slide-header"></div>
<h2 id="org24a7cfa">Lenguajes Declarativos</h2>
<div class="outline-text-2" id="text-org24a7cfa">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgcdf8ef0">
<div class="slide-header"></div>
<h3 id="orgcdf8ef0">Características</h3>
<ul>
<li class="fragment roll-in">Programa es Lógica + Control (Kowalski)</li>

<li class="fragment roll-in">X = X + 1 ¿que significa?</li>

<li class="fragment roll-in">Semánticas equivalentes a la operacional</li>

<li class="fragment roll-in">Programa es Algoritmo + Estructura de Datos (Wirth)</li>

<li class="fragment roll-in">Debugging, Correctitud, Prueba de Programas</li>

<li class="fragment roll-in">Análisis de Programas, Web Semantics</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgad32929">
<div class="slide-header"></div>
<h3 id="orgad32929">Lenguajes</h3>
<ul>
<li>Prolog
<ul>
<li>Ciao Prolog  <a href="http://ciao-lang.org/">http://ciao-lang.org/</a></li>
<li>Swi Prolog   <a href="http://www.swi-prolog.org/">http://www.swi-prolog.org/</a></li>

</ul></li>
<li>Haskell
<a href="https://www.haskell.org/">https://www.haskell.org/</a></li>
<li>Mercury
<a href="https://mercurylang.org/">https://mercurylang.org/</a></li>

</ul>


<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgb3f5f71">
<div class="slide-header"></div>
<h2 id="orgb3f5f71">Prolog</h2>
<div class="outline-text-2" id="text-orgb3f5f71">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org5ed4060">
<div class="slide-header"></div>
<h3 id="org5ed4060">Programación en Lógica</h3>
<ul>
<li class="fragment roll-in">Cláusulas de Horn</li>
<li class="fragment roll-in">Resolución SLD (basado en resolución de Robinson)</li>
<li class="fragment roll-in">Lógica como lenguaje de programación</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org71b88a0">
<div class="slide-header"></div>
<h3 id="org71b88a0">Ejemplo fibonacci</h3>
<div class="outline-text-3" id="text-org71b88a0">
</div><div class="slide-footer"></div>
</section>
<section id="slide-orgd7c9e78">
<div class="slide-header"></div>
<h4 id="orgd7c9e78">sucesion de fibonacci</h4>
<p>
En matemáticas, la sucesión de Fibonacci (a veces llamada erróneamente
serie de Fibonacci) es la siguiente sucesión infinita de números
naturales:
</p>

<p>
\(1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597 \ldots\)
</p>

<p>
La sucesión comienza con los números 1 y 1 y a partir de estos,
<b>cada término es la suma de los dos anteriores</b>, es la relación de
recurrencia que la define.
</p>

<p>
A los elementos de esta sucesión se les llama números de
Fibonacci. Esta sucesión fue descrita en Europa por Leonardo de Pisa,
matemático italiano del siglo XIII también conocido como
Fibonacci. Tiene numerosas aplicaciones en ciencias de la computación,
matemáticas y teoría de juegos. También aparece en configuraciones
biológicas, como por ejemplo en las ramas de los árboles, en la
disposición de las hojas en el tallo, en las flores de alcachofas y
girasoles, en las inflorescencias del brécol romanesco y en la
configuración de las piñas de las coníferas.
</p>

<div class="slide-footer"></div>
</section>
<section id="slide-org7d5c08d">
<div class="slide-header"></div>
<h4 id="org7d5c08d">Conejos</h4>
<p>
una forma de exponer la sucesión de fibonacci es presentando el
crecimiento de una población de conejos con las siguientes reglas:
</p>

<ul>
<li>un conejo adulto, cada mes se reproduce a si mismo generando un
conejo joven.</li>
<li>un conejo joven se vuelve adulto en un mes.</li>

</ul>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">

<col  class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">mes</th>
<th scope="col" class="org-right">0</th>
<th scope="col" class="org-right">1</th>
<th scope="col" class="org-right">2</th>
<th scope="col" class="org-right">3</th>
<th scope="col" class="org-right">4</th>
<th scope="col" class="org-right">5</th>
<th scope="col" class="org-right">6</th>
<th scope="col" class="org-right">7</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">adultos</td>
<td class="org-right">&#xa0;</td>
<td class="org-right">1</td>
<td class="org-right">1</td>
<td class="org-right">2</td>
<td class="org-right">3</td>
<td class="org-right">5</td>
<td class="org-right">8</td>
<td class="org-right">13</td>
</tr>

<tr>
<td class="org-left">jovenes</td>
<td class="org-right">1</td>
<td class="org-right">&#xa0;</td>
<td class="org-right">1</td>
<td class="org-right">1</td>
<td class="org-right">2</td>
<td class="org-right">3</td>
<td class="org-right">5</td>
<td class="org-right">8</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">total</td>
<td class="org-right">1</td>
<td class="org-right">1</td>
<td class="org-right">2</td>
<td class="org-right">3</td>
<td class="org-right">5</td>
<td class="org-right">8</td>
<td class="org-right">13</td>
<td class="org-right">21</td>
</tr>
</tbody>
</table>




<div class="slide-footer"></div>
</section>
<section id="slide-org0aa6fca">
<div class="slide-header"></div>
<h4 id="org0aa6fca">programa</h4>
<div class="org-src-container">

<pre  class="src src-prolog">:- <span style="color: #ffc0cb; font-size: 110%; font-weight: bold;">module</span>(fibonacci,<span style="color: #40e0d0; font-weight: bold;">[</span><span style="color: #1e90ff; font-weight: bold;">f/2</span><span style="color: #40e0d0; font-weight: bold;">]</span>).

:- use_package(fsyntax).
:- fun_eval arith(true).
:- fun_eval defined(true).


<span style="color: #1e90ff; font-weight: bold;">f</span>(0) := 1.
<span style="color: #1e90ff; font-weight: bold;">f</span>(1) := 1.
<span style="color: #1e90ff; font-weight: bold;">f</span>(<span style="color: #bebebe; font-weight: bold;">N</span>) :=  f(<span style="color: #bebebe; font-weight: bold;">N</span> - 1) + f(<span style="color: #bebebe; font-weight: bold;">N</span> - 2) :- <span style="color: #bebebe; font-weight: bold;">N</span> &gt;= 2.
</pre>
</div>


<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org4a50d2f">
<div class="slide-header"></div>
<h3 id="org4a50d2f">Sintaxis</h3>
<p>
Términos:
</p>
<ul>
<li>Atomos</li>
<li>Números</li>
<li>Variables</li>
<li>Términos Complejos</li>

</ul>

<p>
los caracteres válidos son:
</p>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #bebebe; font-weight: bold;">A</span> , <span style="color: #bebebe; font-weight: bold;">B</span>  ...  <span style="color: #bebebe; font-weight: bold;">Z</span>
a , b  ...  <span style="color: #1e90ff; font-weight: bold;">z</span>
+ , - , * , / , &lt; , &gt; , = , : , . , &amp; , ~
</pre>
</div>



<div class="slide-footer"></div>
</section>
<section id="slide-orgc1770c3">
<div class="slide-header"></div>
<h4 id="orgc1770c3">Atomos</h4>
<p>
Un átomo es:
</p>
<ol>
<li>Una cadena de caracteres de letras mayúsculas, minusculas, digitos
y guión bajo, que comience con una letra minúscula.</li>

</ol>
<p>
ejemplos:
</p>
<div class="org-src-container">

<pre  class="src src-prolog">casa trabajo alberto eLLio x21
</pre>
</div>
<ol>
<li><p>
Una secuencia arbitraria de caracteres encerrado en comillas
 simples.
ejemplos:
</p>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #ff0000;">'Alberto'</span> <span style="color: #ff0000;">'Dolar21'</span> <span style="color: #ff0000;">'EL Paso'</span> <span style="color: #ff0000;">'&amp;^%si'</span>
</pre>
</div></li>
<li>una cadena de solo caracteres especiales.</li>

</ol>
<p>
ejemplos
</p>
<div class="org-src-container">

<pre  class="src src-prolog">@= ===&gt; :- 
</pre>
</div>

<div class="slide-footer"></div>
</section>
<section id="slide-orgaef00fe">
<div class="slide-header"></div>
<h4 id="orgaef00fe">Números</h4>
<p>
ejemplos
</p>
<div class="org-src-container">

<pre  class="src src-prolog">-8 -1 34 23.98 10001 1697.877443  
</pre>
</div>

<div class="slide-footer"></div>
</section>
<section id="slide-orgd118611">
<div class="slide-header"></div>
<h4 id="orgd118611">Variables</h4>
<p>
Una variable es una cadena de caracteres de letras mayúsculas,
minúsculas, digitos, guión bajo, que comience con una letra mayúscula
o con un guión bajo. 
ejemplos:
</p>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #bebebe; font-weight: bold;">X</span> <span style="color: #bebebe; font-weight: bold;">Y</span> <span style="color: #bebebe; font-weight: bold;">Variable</span> <span style="color: #bebebe; font-weight: bold;">_etiqueta</span> <span style="color: #bebebe; font-weight: bold;">X_526</span> <span style="color: #bebebe; font-weight: bold;">List</span> <span style="color: #bebebe; font-weight: bold;">HEAD</span>
</pre>
</div>

<div class="slide-footer"></div>
</section>
<section id="slide-org2d35476">
<div class="slide-header"></div>
<h4 id="org2d35476">Términos Complejos</h4>
<p>
Un término se compone de un functor seguido de cero a N argumentos entre paréntesis y separados
por comas. Cada argumento es un término.
</p>

<p>
ejemplos:
</p>

<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">fecha</span>(12,octubre,2016)
<span style="color: #1e90ff; font-weight: bold;">animal_peligroso</span>(<span style="color: #ff0000;">'Leon'</span>)
<span style="color: #1e90ff; font-weight: bold;">arbol</span>(23,arbol(12,nil,nil),nil)
</pre>
</div>


<figure>
<img src="compoundterms.png" alt="compoundterms.png">

</figure>


<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org2f21ee0">
<div class="slide-header"></div>
<h3 id="org2f21ee0">Listas</h3>
<ul>
<li class="fragment roll-in">.(1,.(2,.(3,.(4,[]))))   dos argumentos Cabeza y Cola ./2</li>
<li class="fragment roll-in">[1|[2|[3|[4|[]]]]]    notacion alternativa [|]</li>
<li class="fragment roll-in">[1,2|[3|[4|[]]]]  = [1,2,3|[4|[]]] = [1,2,3,4|[]] = [1,2,3,4]</li>
<li class="fragment roll-in">Unificar [a,1,b,4,c] = [X,Y|Z] &#x2014;&gt; X=a, Y=1, Z=[b,4,c]</li>

</ul>


<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org4e35227">
<div class="slide-header"></div>
<h3 id="org4e35227">Ejemplo Autómata Finito</h3>

<figure>
<img src="automata.png" alt="automata.png">

</figure>

<ul>
<li><p>
Ejemplos de cadenas aceptadas:
</p>

<p>
aabbab, ab, aaab, babab
</p></li>

<li><p>
Ejemplos de cadenas rechazadas
</p>

<p>
aabb, aa, bb, ababa
</p></li>

</ul>


<div class="slide-footer"></div>
</section>
<section id="slide-org5fa804e">
<div class="slide-header"></div>
<h4 id="org5fa804e">Código</h4>
<p>
El código en prolog que representa el autómata es
</p>

<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">final</span>(s3).

<span style="color: #1e90ff; font-weight: bold;">trans</span>(s1,a,s1).
<span style="color: #1e90ff; font-weight: bold;">trans</span>(s1,a,s2).
<span style="color: #1e90ff; font-weight: bold;">trans</span>(s1,b,s1).
<span style="color: #1e90ff; font-weight: bold;">trans</span>(s2,b,s3).
<span style="color: #1e90ff; font-weight: bold;">trans</span>(s3,b,s4).

<span style="color: #1e90ff; font-weight: bold;">silent</span>(s2,s4).
<span style="color: #1e90ff; font-weight: bold;">silent</span>(s3,s1).

</pre>
</div>

<figure>
<img src="automata.png" alt="automata.png">

</figure>

<div class="slide-footer"></div>
</section>
<section id="slide-org93a7644">
<div class="slide-header"></div>
<h4 id="org93a7644">Código</h4>
<p>
el código que representa el reconocedor de las cadenas es
</p>

<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">accepts_</span>(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #40e0d0; font-weight: bold;">[]</span>):-
        final(<span style="color: #bebebe; font-weight: bold;">State</span>).

<span style="color: #1e90ff; font-weight: bold;">accepts_</span>(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #40e0d0; font-weight: bold;">[</span><span style="color: #bebebe; font-weight: bold;">X</span><span style="color: #40e0d0; font-weight: bold;">|</span><span style="color: #bebebe; font-weight: bold;">Rest</span><span style="color: #40e0d0; font-weight: bold;">]</span>):-
        trans(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #bebebe; font-weight: bold;">X</span>,<span style="color: #bebebe; font-weight: bold;">State1</span>),
        accepts_(<span style="color: #bebebe; font-weight: bold;">State1</span>,<span style="color: #bebebe; font-weight: bold;">Rest</span>).

<span style="color: #1e90ff; font-weight: bold;">accepts_</span>(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #bebebe; font-weight: bold;">String</span>):-
        silent(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #bebebe; font-weight: bold;">State1</span>),
        accepts_(<span style="color: #bebebe; font-weight: bold;">State1</span>,<span style="color: #bebebe; font-weight: bold;">String</span>).

</pre>
</div>

<div class="slide-footer"></div>
</section>
<section id="slide-org0c5ce26">
<div class="slide-header"></div>
<h4 id="org0c5ce26">Código</h4>
<p>
el código principal es 
</p>

<div class="org-src-container">

<pre  class="src src-prolog">:- <span style="color: #ffc0cb; font-size: 110%; font-weight: bold;">module</span>(automata,<span style="color: #40e0d0; font-weight: bold;">[</span><span style="color: #1e90ff; font-weight: bold;">main/1</span><span style="color: #40e0d0; font-weight: bold;">]</span>,<span style="color: #bebebe; font-weight: bold;">_</span>).
:- <span style="color: #ffc0cb; font-size: 110%; font-weight: bold;">use_module</span>(library(iso_char)).

<span style="color: #1e90ff; font-weight: bold;">main</span>(<span style="color: #40e0d0; font-weight: bold;">[</span><span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #bebebe; font-weight: bold;">Chain</span><span style="color: #40e0d0; font-weight: bold;">]</span>):-
        ( accepts(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #bebebe; font-weight: bold;">Chain</span>) <span style="color: #40e0d0; font-weight: bold;">-&gt;</span> display(<span style="color: #ff0000;">'aceptada '</span>),nl
        <span style="color: #40e0d0; font-weight: bold;">;</span>
            display(<span style="color: #ff0000;">'rechazada '</span>),nl
        ).
<span style="color: #1e90ff; font-weight: bold;">main</span>(<span style="color: #bebebe; font-weight: bold;">_</span>):- display(<span style="color: #ff0000;">'especificar estado y cadena '</span>),nl.

<span style="color: #1e90ff; font-weight: bold;">accepts</span>(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #bebebe; font-weight: bold;">String</span>):-
        atom_chars(<span style="color: #bebebe; font-weight: bold;">String</span>, <span style="color: #bebebe; font-weight: bold;">Chars</span>),
        accepts_(<span style="color: #bebebe; font-weight: bold;">State</span>,<span style="color: #bebebe; font-weight: bold;">Chars</span>).

</pre>
</div>

<div class="slide-footer"></div>
</section>
<section id="slide-org2ae3183">
<div class="slide-header"></div>
<h4 id="org2ae3183">Arbol SLD</h4>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">accept</span>(s1,<span style="color: #40e0d0; font-weight: bold;">[</span>a,a,b<span style="color: #40e0d0; font-weight: bold;">]</span>).
</pre>
</div>

<figure>
<img src="acceptaab.png" alt="acceptaab.png">

</figure>

<div class="slide-footer"></div>
</section>
<section id="slide-org3ad1722">
<div class="slide-header"></div>
<h4 id="org3ad1722">Arbol SLD</h4>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">accept</span>(s1,<span style="color: #40e0d0; font-weight: bold;">[</span>a,b<span style="color: #40e0d0; font-weight: bold;">]</span>).
</pre>
</div>

<figure>
<img src="accepts1ab.png" alt="accepts1ab.png">

</figure>

<div class="slide-footer"></div>
</section>
<section id="slide-orga390dd5">
<div class="slide-header"></div>
<h4 id="orga390dd5">Arbol SLD</h4>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">accept</span>(s1,<span style="color: #40e0d0; font-weight: bold;">[</span>b<span style="color: #40e0d0; font-weight: bold;">]</span>).
</pre>
</div>

<figure>
<img src="accepts1b.png" alt="accepts1b.png">

</figure>

<div class="slide-footer"></div>
</section>
<section id="slide-orga0efdd4">
<div class="slide-header"></div>
<h4 id="orga0efdd4">Arbol SLD</h4>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">accept</span>(s2,<span style="color: #40e0d0; font-weight: bold;">[</span>b<span style="color: #40e0d0; font-weight: bold;">]</span>).
</pre>
</div>

<figure>
<img src="accepts2b.png" alt="accepts2b.png">

</figure>

<div class="slide-footer"></div>
</section>
<section id="slide-org0c9effc">
<div class="slide-header"></div>
<h4 id="org0c9effc">Arbol SLD</h4>
<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #1e90ff; font-weight: bold;">accept</span>(s4,<span style="color: #40e0d0; font-weight: bold;">[</span>b<span style="color: #40e0d0; font-weight: bold;">]</span>).
</pre>
</div>

<figure>
<img src="accepts4b.png" alt="accepts4b.png">

</figure>

<div class="slide-footer"></div>
</section>
<section id="slide-org6646206">
<div class="slide-header"></div>
<h4 id="org6646206">\(Tp^n\)</h4>
<p>
\(U = \{ a,b,s1,s2,s3,s4,[],[a],[b] ,[s1],\ldots,[a,a],[a,b],\ldots\}\)
</p>

<p>
\(Bp = \{final(a),final(b),\ldots, trans(a,a,a) , trans(a,b,a) , \ldots\) 
</p>

<p>
\(accepts(a,a), accepts(a,[]) \ldots \}\)
</p>

<p>
\(Tp(\{\}) = \{final(s3),trans(s1,a,s1),trans(s1,a,s2),trans(s1,b,s1)\)
</p>

<p>
\(trans(s2,b,s3),trans(s3,b,s4),silent(s2,s4),silent(s3,s1)\}\)
</p>

</section>
<section >

<p>
\(Tp^1(\{\}) = Tp(\{\}) \cup \{accepts(s3,[])\}\)
</p>

<p>
\(Tp^2(\{\}) = Tp^1(\{\}) \cup \{accepts(s2,[b]\}\)
</p>

<p>
\(Tp^3(\{\}) = Tp^2(\{\}) \cup \{accepts(s1,[a,b])\}\)
</p>

<p>
\(Tp^4(\{\}) = Tp^3(\{\}) \cup \{accepts(s3,[a,b])\)
</p>

<p>
\(accepts(s1,[a,a,b]),accepts(s1,[b,a,b])\}\)
</p>

<p>
\(Tp^5(\{\}) = Tp^4(\{\}) \cup \{accepts(s2,[b,a,b])\)
</p>

<p>
\(accepts(s3,[a,a,b]),accepts(s3,[b,a,b]),accepts(s1,[a,a,a,b])\)
</p>

<p>
\(accepts(s1,[b,a,a,b]),accepts(s1,[a,b,a,b]),accepts(s1,[b,b,a,b])\}\)
</p>
<div class="slide-footer"></div>
</section>
</section>
</div>
</div>
<script src="../reveal.js-master/lib/js/head.min.js"></script>
<script src="../reveal.js-master/js/reveal.js"></script>

<script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

controls: true,
progress: true,
history: false,
center: true,
slideNumber: 't',
rollingLinks: false,
keyboard: true,
overview: true,

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'cube', // default/cube/page/concave/zoom/linear/fade/none
transitionSpeed: 'default',
multiplex: {
    secret: '', // null if client
    id: '', // id, obtained from socket.io server
    url: '' // Location of socket.io server
},

// Optional libraries used to extend on reveal.js
dependencies: [
 { src: '../reveal.js-master/lib/js/classList.js', condition: function() { return !document.body.classList; } },
 { src: '../reveal.js-master/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: '../reveal.js-master/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: '../reveal.js-master/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
 { src: '../reveal.js-master/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }]
,});
</script>
</body>
</html>

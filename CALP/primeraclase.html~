<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Conceptos Avanzados en Lenguajes de Programación</title>
<meta name="author" content="(Claudio Vaucheret / Marcelo Amaolo)"/>
<link rel="stylesheet" href="../reveal.js-master/css/reveal.css"/>
<link rel="stylesheet" href="../reveal.js-master/css/theme/solarized.css" id="theme"/>
<link rel="stylesheet" href=""/>
<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
    if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '../reveal.js-master/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    }
</script>
</head>
<body>
<div class="reveal">
<div class="slides">
<section id="sec-title-slide" data-background="" data-background-size="" data-background-repeat="" data-background-transition="">
<h1>Conceptos Avanzados en Lenguajes de Programación</h1><h2>Claudio Vaucheret / Marcelo Amaolo</h2><h2><a href="mailto:cv@fi.uncoma.edu.ar / marcelo.amaolo@fi.uncoma.edu.ar">cv@fi.uncoma.edu.ar / marcelo.amaolo@fi.uncoma.edu.ar</a></h2><h2><span class="timestamp-wrapper"><span class="timestamp">&lt;2016-08-16 mar&gt;</span></span></h2>
</section>
<section id="table-of-contents">
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#/slide-orgheadline6">Introducción</a>
<ul>
<li><a href="#/slide-orgheadline1">Razones para estudiar Conceptos de Lenguajes de Programación</a></li>
<li><a href="#/slide-orgheadline2">Dominios de Programación</a></li>
<li><a href="#/slide-orgheadline3">Criterios de Evaluación de Lenguajes</a></li>
<li><a href="#/slide-orgheadline4">Legibilidad</a></li>
<li><a href="#/slide-orgheadline5">Escribilidad</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline30">Evolución de los Lenguajes de Programación</a>
<ul>
<li><a href="#/slide-orgheadline7">Lenguajes de Programación</a></li>
<li><a href="#/slide-orgheadline8">Evolución de los primeros lenguajes</a></li>
<li><a href="#/slide-orgheadline10">Konrad Zuze's language de la computadora Z4.</a>
<ul>
<li><a href="#/slide-orgheadline9">Zuse's Plankalkül</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline15">Codigo Máquina: pseudocodigos ¿?</a>
<ul>
<li><a href="#/slide-orgheadline11">Escribir en lenguaje máquina</a></li>
<li><a href="#/slide-orgheadline12">Shorte Code Mauchly (1949)</a></li>
<li><a href="#/slide-orgheadline13">Speedcoding</a></li>
<li><a href="#/slide-orgheadline14">Otros sistemas relacionados</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline25">IBM 704 y Fortran</a>
<ul>
<li><a href="#/slide-orgheadline16">Fortan</a></li>
<li><a href="#/slide-orgheadline17">Proceso de Diseño</a></li>
<li><a href="#/slide-orgheadline18">Fortran I</a></li>
<li><a href="#/slide-orgheadline19">Fortran I</a></li>
<li><a href="#/slide-orgheadline20">Fortran II</a></li>
<li><a href="#/slide-orgheadline21">Fortran IV</a></li>
<li><a href="#/slide-orgheadline22">Fortran 77</a></li>
<li><a href="#/slide-orgheadline23">Fortran 90</a></li>
<li><a href="#/slide-orgheadline24">Evaluación de Fortran</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline26">Programación Funcional: LISP</a></li>
<li><a href="#/slide-orgheadline27">Primera sofisticación: ALGOL 60</a></li>
<li><a href="#/slide-orgheadline28">Aplicaciones Comerciales: COBOL</a></li>
<li><a href="#/slide-orgheadline29">Comienzo de tiempo compartido: BASIC</a></li>
</ul>
</li>
</ul>
</div>
</nav>
</section>

<section>
<section id="slide-orgheadline6">
<div class="slide-header"></div>
<h2 id="orgheadline6">Introducción</h2>
<div class="outline-text-2" id="text-orgheadline6">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline1">
<div class="slide-header"></div>
<h3 id="orgheadline1">Razones para estudiar Conceptos de Lenguajes de Programación</h3>
<ul>
<li>Incrementa la habilidad para expresar ideas</li>
<li>Mejora la capacidad de elegir el lenguaje apropiado</li>
<li>Incrementa la capacidad de aprender nuevos lenguajes</li>
<li>Mejora el entendimiento del funcionamiento interno del lenguaje
(implementación)</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline2">
<div class="slide-header"></div>
<h3 id="orgheadline2">Dominios de Programación</h3>
<ul>
<li>Aplicaciones Científicas
<ul>
<li>Gran número de computación de punto flotante</li>
<li>Fortran</li>

</ul></li>
<li>Aplicaciones Empresariales
<ul>
<li>Producción de Reportes, uso de números decimales y caracteres</li>
<li>Cobol</li>

</ul></li>
<li>Inteligencia Artificial
<ul>
<li>Manipulación simbólica (en lugar de números)</li>
<li>LISP</li>

</ul></li>
<li>Sistemas de Programación
<ul>
<li>Necesidad de eficiencia (debido al uso continuo)</li>
<li>C</li>

</ul></li>
<li>Software para la WEB
<ul>
<li>Colección ecléctica de lenguajes: maukup (e.g. HTML5), scripting
(e.g. PHP), de propósito general (e.g. Java)</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline3">
<div class="slide-header"></div>
<h3 id="orgheadline3">Criterios de Evaluación de Lenguajes</h3>
<ul>
<li><b>Legibilidad</b>: la facilidad con la cual los programas pueden ser
leídos y entendidos.</li>
<li><b>Escribilidad</b>: la facilidad con la cual un lenguaje puede ser usado
para crear programas</li>
<li><b>Confiabilidad</b>: El grado en que el lenguaje funciona de acuerdo a
sus especificaciones.</li>
<li><b>Costo</b>: de uso, compilación, mantenimiento etc.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline4">
<div class="slide-header"></div>
<h3 id="orgheadline4">Legibilidad</h3>
<ul>
<li>Simplicidad
<ul>
<li>Un conjunto manejable de características y construcciones</li>
<li>Poca multiplicidad de características (medios de realizar la misma operación)</li>
<li>Minima sobrecarga de operadores</li>

</ul></li>
<li>Ortogonalidad
<ul>
<li>Un conjunto relativamente pequeño de construcciones primitivas que
puedan ser combinadas en un numero pequeño de modos</li>
<li>Toda posible combinación sea legal.</li>

</ul></li>
<li>Sentencas de Control
<ul>
<li>La presencia de bien conocidas estructuras de control</li>

</ul></li>
<li>Tipos de Datos y Estructuras
<ul>
<li>La presencia de facilidades adecuadas para definir estructuras de datos</li>

</ul></li>
<li>Consideraciones sintácticas
<ul>
<li>Composición flexible de identificadores</li>
<li>Palabras especiales y métodos para formar sentencias compuestas</li>
<li>Construcciones autodescriptivas, palabras reservadas
significativas</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline5">
<div class="slide-header"></div>
<h3 id="orgheadline5">Escribilidad</h3>
<ul>
<li>Simplicidad y ortogonalidad
<ul>
<li>Pocas constucciones, numero pequeño de primitivas y pocas reglas
para combinarlas.</li>

</ul></li>
<li>Soporte para la abstracción
<ul>
<li>La habilidad para definir y usar estructuras complejas o
operaciones de modo que los detalles puedan ser ignorados</li>

</ul></li>
<li>Expresibilidad
<ul>
<li>Un conjunto conveniente de modos de especificar operaciones</li>
<li>Ejemplo: La inclusión de la sentencia <b>FOR</b> en  muchos lenguajes modernos</li>

</ul></li>

</ul>


<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline30">
<div class="slide-header"></div>
<h2 id="orgheadline30">Evolución de los Lenguajes de Programación</h2>
<div class="outline-text-2" id="text-orgheadline30">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline7">
<div class="slide-header"></div>
<h3 id="orgheadline7">Lenguajes de Programación</h3>

<figure>
<p><img src="evolleng.png" alt="evolleng.png">
</p>
</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline8">
<div class="slide-header"></div>
<h3 id="orgheadline8">Evolución de los primeros lenguajes</h3>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline10">
<div class="slide-header"></div>
<h3 id="orgheadline10">Konrad Zuze's language de la computadora Z4.</h3>
<div class="outline-text-3" id="text-orgheadline10">
</div><div class="slide-footer"></div>
</section>
<section id="slide-orgheadline9">
<div class="slide-header"></div>
<h4 id="orgheadline9">Zuse's Plankalkül</h4>
<ul>
<li>Desarrollado en 1945</li>
<li>Nunca implementado</li>
<li>Su descripción fue publicada en 1972.</li>
<li>Tipos de datos: bit, Integer and float tipos compuestos.</li>
<li>arreglos y registros</li>

</ul>

<div class="org-src-container">

<pre  class="src src-lisp">  | A + 1 =&gt; A
V | 4        5
S | 1.n      1.n
</pre>
</div>




<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline15">
<div class="slide-header"></div>
<h3 id="orgheadline15">Codigo Máquina: pseudocodigos ¿?</h3>
<div class="outline-text-3" id="text-orgheadline15">
</div><div class="slide-footer"></div>
</section>
<section id="slide-orgheadline11">
<div class="slide-header"></div>
<h4 id="orgheadline11">Escribir en lenguaje máquina</h4>
<ul>
<li>poco legibles y modificables</li>
<li>sin indices ni punto flotante</li>
<li>direccionamiento absoluto</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline12">
<div class="slide-header"></div>
<h4 id="orgheadline12">Shorte Code Mauchly (1949)</h4>
<ul>
<li>computadora BINAC</li>
<li>Expresiones eran codificadas de izquierda a derecha</li>
<li>Ejemplos de operaciones:</li>

</ul>

<div class="org-src-container">

<pre  class="src src-lisp">01 - 06 abs value 1n (n+2)nd power
02 ) 07 +         2n (n+2)nd root
03 = 08 pause     4n if &lt;= n
04 / 09 (         58 print and tab
</pre>
</div>

<p>
La sentencia X0 = SQRT(ABS(Y0)) podria ser codificada como:
</p>

<div class="org-src-container">

<pre  class="src src-lisp">00 X0 03 20 06 Y0
</pre>
</div>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline13">
<div class="slide-header"></div>
<h4 id="orgheadline13">Speedcoding</h4>
<ul>
<li>Desarrollado por John Backus en 1954 para IBM 701</li>
<li>Pseudo operaciones para funciones aritméticas y matemtaticas
<ul>
<li>bifurcación condicional e incondicional</li>
<li>registros autoincrementales para acceso a arreglos</li>
<li>4.2 millisegundos la instruccion de suma y 700 palabras para el programa</li>
<li>2 semanas de programación en pocas horas!!!</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline14">
<div class="slide-header"></div>
<h4 id="orgheadline14">Otros sistemas relacionados</h4>
<ul>
<li>Sistema de "compilación" UNIVAC
<ul>
<li>Desarrollado por el equipo de Brace Hopper</li>
<li>Pseudocodigo expandido en código máquina (macros)</li>

</ul></li>
<li>David J Wheeler (Universidad de Cambridge) (1950)
<ul>
<li>Desarrollo un método de usar bloques de direccionamiento reubicables</li>

</ul></li>
<li>Wilkes (1951-1957) desarrollo lenguaje <i>assembler</i> con estas ideas</li>

</ul>


<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline25">
<div class="slide-header"></div>
<h3 id="orgheadline25">IBM 704 y Fortran</h3>
<div class="outline-text-3" id="text-orgheadline25">
</div><div class="slide-footer"></div>
</section>
<section id="slide-orgheadline16">
<div class="slide-header"></div>
<h4 id="orgheadline16">Fortan</h4>
<ul>
<li>Fortran 0: 1954 - no implementado</li>
<li>Fortran 1 1957
<ul>
<li>Diseñado para la nueva IBM 704, que tenía registros y aritmética
de punto flotante</li>
<li>Entorno de Desarrollo
<ul>
<li>Las Computadoras eran pequeñas y confiables</li>
<li>Las aplicaciones eran científicas</li>
<li>Sin metodología ni herramientas de programación</li>
<li>Importancia en <b>eficiencia</b></li>

</ul></li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline17">
<div class="slide-header"></div>
<h4 id="orgheadline17">Proceso de Diseño</h4>
<ul>
<li>El impacto del entorno en el diseño de Fortran
<ul>
<li>Sin necesidad de almacenamiento dinámico</li>
<li>Necesidad de un buen manejo de arreglos y ciclos</li>
<li>Sin manejo de cadenas, aritmética decimal o herramientas de
entrada/salida (de uso comercial)</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline18">
<div class="slide-header"></div>
<h4 id="orgheadline18">Fortran I</h4>
<ul>
<li>Primera versión implementada de Fortrand
<ul>
<li>Nombres hasta 6 caracteres</li>
<li>Ciclos iterativos con post condición (<b>DO</b>)</li>
<li>I/O formateada</li>
<li>subprogramas definidos por el usuario</li>
<li>Sentencias condicionales de tres modos (<b>IF</b> aritmético)</li>
<li>sentencias sin tipo de datos</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline19">
<div class="slide-header"></div>
<h4 id="orgheadline19">Fortran I</h4>
<ul>
<li>Primera versión implementada
<ul>
<li>Sin compilación separada</li>
<li>Compilador distribuido en Abril de 1957,</li>
<li>Programas de mas de 400 lineas raramente compilaban correctamente,
principalmente debido a la pobre confiabilidad de la IBM 704</li>
<li>La Codificación era verdaderamente rápida</li>
<li>Rapidamente se volvió ampliamente usado</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline20">
<div class="slide-header"></div>
<h4 id="orgheadline20">Fortran II</h4>
<ul>
<li>Distribuido en 1958
<ul>
<li>Compilación independiente</li>
<li>Se corrigieron muchos errores</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline21">
<div class="slide-header"></div>
<h4 id="orgheadline21">Fortran IV</h4>
<ul>
<li>Desarrollado durante 1960-1962
<ul>
<li>Declaración explicita de tipos</li>
<li>Sentencia de selección lógica</li>
<li>Nombres de programas podian se pasados como parámetros</li>
<li>ANSI standard en 1966</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline22">
<div class="slide-header"></div>
<h4 id="orgheadline22">Fortran 77</h4>
<ul>
<li>Se volvió el nuevo estandard en 1978
<ul>
<li>Manejo de cadenas de caracteres</li>
<li>sentencia de control de ciclos lógico</li>
<li>sentencia <b>IF-THEN-ELSE</b></li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline23">
<div class="slide-header"></div>
<h4 id="orgheadline23">Fortran 90</h4>
<ul>
<li>Con los mas significativos cámbios desde el Fortran 77
<ul>
<li>Módulos</li>
<li>Arreglos dinámicos</li>
<li>Punteros</li>
<li>Recursión</li>
<li>sentencia <b>CASE</b></li>
<li>chequeo de tipos en los parametros</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline24">
<div class="slide-header"></div>
<h4 id="orgheadline24">Evaluación de Fortran</h4>
<ul>
<li>Compiladores altamente optimizados (todas las versiones anteriores a 90)
<ul>
<li>Los tipos y almacenamiento de todas las variables eran fijas antes del
tiempo de ejecución.</li>

</ul></li>
<li>Dramaticamente cambió para siempre el modo en que las computadoras
fueron usadas</li>
<li>Caracterizados como la <i>lingua franca</i> del mundo de la computación</li>

</ul>


<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline26">
<div class="slide-header"></div>
<h3 id="orgheadline26">Programación Funcional: LISP</h3>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline27">
<div class="slide-header"></div>
<h3 id="orgheadline27">Primera sofisticación: ALGOL 60</h3>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline28">
<div class="slide-header"></div>
<h3 id="orgheadline28">Aplicaciones Comerciales: COBOL</h3>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline29">
<div class="slide-header"></div>
<h3 id="orgheadline29">Comienzo de tiempo compartido: BASIC</h3>
<div class="slide-footer"></div>
</section>
</section>
</div>
</div>
<script src="../reveal.js-master/lib/js/head.min.js"></script>
<script src="../reveal.js-master/js/reveal.js"></script>

<script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

controls: true,
progress: true,
history: false,
center: true,
slideNumber: true,
rollingLinks: false,
keyboard: true,
overview: true,

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'cube', // default/cube/page/concave/zoom/linear/fade/none
transitionSpeed: 'default',
multiplex: {
    secret: '', // null if client
    id: '', // id, obtained from socket.io server
    url: '' // Location of socket.io server
},

// Optional libraries used to extend on reveal.js
dependencies: [
]
,});
</script>
</body>
</html>

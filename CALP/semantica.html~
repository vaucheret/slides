<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Conceptos Avanzados en Lenguajes de Programación</title>
<meta name="author" content="(Semanticas)"/>
<link rel="stylesheet" href="../reveal.js-master/css/reveal.css"/>
<link rel="stylesheet" href="../reveal.js-master/css/theme/solarized.css" id="theme"/>
<link rel="stylesheet" href=""/>
<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
    if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '../reveal.js-master/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    }
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
</head>
<body>
<div class="reveal">
<div class="slides">
<section id="sec-title-slide" data-background="" data-background-size="" data-background-repeat="" data-background-transition="">
<h1>Conceptos Avanzados en Lenguajes de Programación</h1><h2>Semanticas</h2><h2><a href="mailto:Claudio Vaucheret / cv@fi.uncoma.edu.ar">Claudio Vaucheret / cv@fi.uncoma.edu.ar</a></h2><h2><span class="timestamp-wrapper"><span class="timestamp">&lt;2016-08-22 lun&gt;</span></span></h2>
</section>
<section id="table-of-contents">
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#/slide-orgheadline5">Introducción</a>
<ul>
<li><a href="#/slide-orgheadline1">Introducción</a></li>
<li><a href="#/slide-orgheadline2">Definición Formal de Lenguajes</a></li>
<li><a href="#/slide-orgheadline3">Métodos Formales de Describir la Sintaxis</a></li>
<li><a href="#/slide-orgheadline4">BNF y Gramáticas Libres de Contexto</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline13">Semántica Estática</a>
<ul>
<li><a href="#/slide-orgheadline6">Gramáticas con atributos</a></li>
<li><a href="#/slide-orgheadline7">Gramáticas con atributos: Definición</a></li>
<li><a href="#/slide-orgheadline8">Gramáticas con atributos: Definición</a></li>
<li><a href="#/slide-orgheadline9">Gramáticas con atributos: Un Ejemplo</a></li>
<li><a href="#/slide-orgheadline10">Gramáticas con atributos: Un Ejemplo</a></li>
<li><a href="#/slide-orgheadline11">Gramáticas con atributos</a></li>
<li><a href="#/slide-orgheadline12">Gramáticas con atributos</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline45">Semántica Dinámica</a>
<ul>
<li><a href="#/slide-orgheadline14">Métodos Desarrollados</a></li>
<li><a href="#/slide-orgheadline17">Semántica Operacional</a>
<ul>
<li><a href="#/slide-orgheadline15">Semántica Operacional</a></li>
<li><a href="#/slide-orgheadline16">Semántica Operacional</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline26">Semántica Denotacional</a>
<ul>
<li><a href="#/slide-orgheadline18">Semántica Denotacional</a></li>
<li><a href="#/slide-orgheadline19">Semántica Denotacional vs Semántica Operacional</a></li>
<li><a href="#/slide-orgheadline20">Números Decimales</a></li>
<li><a href="#/slide-orgheadline21">Expresiones</a></li>
<li><a href="#/slide-orgheadline22">asignación</a></li>
<li><a href="#/slide-orgheadline23">Ciclo 'while'</a></li>
<li><a href="#/slide-orgheadline24">Ciclo</a></li>
<li><a href="#/slide-orgheadline25">Evaluación</a></li>
</ul>
</li>
<li><a href="#/slide-orgheadline44">Semántica Axiomática</a>
<ul>
<li><a href="#/slide-orgheadline27">Semántica Axiomática</a></li>
<li><a href="#/slide-orgheadline28">Semántica Axiomática</a></li>
<li><a href="#/slide-orgheadline29">Semántica Axiomática</a></li>
<li><a href="#/slide-orgheadline30">Proceso de prueba de programa</a></li>
<li><a href="#/slide-orgheadline31">Axiomas</a></li>
<li><a href="#/slide-orgheadline32">Axiomas</a></li>
<li><a href="#/slide-orgheadline33">Axiomas</a></li>
<li><a href="#/slide-orgheadline34">Axiomas</a></li>
<li><a href="#/slide-orgheadline35">Axiomas</a></li>
<li><a href="#/slide-orgheadline36">Axiomas</a></li>
<li><a href="#/slide-orgheadline37">Ejemplo</a></li>
<li><a href="#/slide-orgheadline38">Axiomas</a></li>
<li><a href="#/slide-orgheadline39">Axiomas</a></li>
<li><a href="#/slide-orgheadline40">Ejemplo</a></li>
<li><a href="#/slide-orgheadline41">Ejemplo</a></li>
<li><a href="#/slide-orgheadline42">Invariante</a></li>
<li><a href="#/slide-orgheadline43">Evaluación</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>
</section>

<section>
<section id="slide-orgheadline5">
<div class="slide-header"></div>
<h2 id="orgheadline5">Introducción</h2>
<div class="outline-text-2" id="text-orgheadline5">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline1">
<div class="slide-header"></div>
<h3 id="orgheadline1">Introducción</h3>
<ul>
<li><b>Sintaxis</b>: La forma y estructura de las expresiones, sentencias y
unidades del programa.</li>
<li><b>Semántica</b>: El significado de las expresiones, sentencias, y
unidades del programa.</li>
<li>Sintaxis y Semántica proveen una Definición del Lenguaje
<ul>
<li>Usuarios de una Definición del Lenguaje
<ul>
<li>Otros diseñadores del Lenguaje</li>
<li>Implementadores</li>
<li>Programadores</li>

</ul></li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline2">
<div class="slide-header"></div>
<h3 id="orgheadline2">Definición Formal de Lenguajes</h3>
<ul>
<li><b>Reconocedores</b>
<ul>
<li>Un dispositivo de reconocimiento que lee cadenas del lenguaje y
decide si las cadenas de entrada pertenecen al Lenguaje.</li>
<li>Ejemplo, el analizador sintáctico de un compilador.</li>

</ul></li>
<li><b>Generadores</b>
<ul>
<li>Un dispositivo que genera sentencias de un lenguaje</li>
<li>Se puede determinar si la sintaxis de una sentencia particular es
correcta comparándola con la estructura del generador.</li>

</ul></li>

</ul>
<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline3">
<div class="slide-header"></div>
<h3 id="orgheadline3">Métodos Formales de Describir la Sintaxis</h3>
<ul>
<li>Forma Backus-Naur y gramáticas libres de contexto
<ul>
<li>El método mas conocido para describir la sintaxis de un Lenguaje
de Programación.</li>

</ul></li>
<li>BNF Extendida
<ul>
<li>Mejora la legibilidad de BNF</li>

</ul></li>
<li>Gramáticas y Reconocedores</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline4">
<div class="slide-header"></div>
<h3 id="orgheadline4">BNF y Gramáticas Libres de Contexto</h3>
<ul>
<li>Gramáticas libres de Contexto
<ul>
<li>Desarrollado por Noam Chomsky a mediados de 1950s</li>
<li>Generadores de Lenguajes, medio de  describir la la sintaxis de
lenguajes naturales</li>
<li>Define clases de lenguajes</li>

</ul></li>
<li>Forma Backus-Naur (1959)
<ul>
<li>Inventado por John Backus para describir Algol 58</li>
<li>Árboles sintacticos - ambiguedad del lenguaje</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline13">
<div class="slide-header"></div>
<h2 id="orgheadline13">Semántica Estática</h2>
<div class="outline-text-2" id="text-orgheadline13">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline6">
<div class="slide-header"></div>
<h3 id="orgheadline6">Gramáticas con atributos</h3>
<ul>
<li>Las Gramáticas Libres de Contexto (GLC) no pueden describir toda la sintaxis de
los lenguajes de programación.</li>
<li>Agregados a GLC para introducir información semántica en los árboles sintácticos</li>
<li>Principal aporte de las Gramáticas con atributos
<ul>
<li>Especificación de la semántica estática</li>
<li>Diseño de Compiladores (chequeo de semántica estática)</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline7">
<div class="slide-header"></div>
<h3 id="orgheadline7">Gramáticas con atributos: Definición</h3>
<ul>
<li>Una Gramática con atributos es una gramática libre de contexto \(G =
  (S,N,T,P)\) con los siguientes agregados:
<ul>
<li>Por cada símbolo de gramática \(x\) hay un conjunto \(A(x)\) de
valores de atributos</li>
<li>Cada regla tiene un conjunto de funciones que definen ciertos
atributos de los no terminales en la regla</li>
<li>Cada regla tiene un conjunto posiblemente vacío de predicados para
chequear la consistencia de los atributos</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline8">
<div class="slide-header"></div>
<h3 id="orgheadline8">Gramáticas con atributos: Definición</h3>
<ul>
<li>Sea \(X_0 \to X_1 ... X_n\) una regla de la gramática libre de contexto</li>
<li>Funciones de la forma \(S(X_0) = f(A(X_1), ... , A(X_n))\) definen
<i>atributos sintetizados</i></li>
<li>Funciones de la forma \(I(X_j) = f(A(X_0)), ... , f(A(X_{j-1}))\) para \(i
  <= j <= n\), definen <i>atributos heredados</i></li>
<li>Inicialmente hay <i>atributos intrínsecos</i> en las hojas de los árboles sintácticos</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline9">
<div class="slide-header"></div>
<h3 id="orgheadline9">Gramáticas con atributos: Un Ejemplo</h3>
<ul>
<li>Sintaxis
<ul>
<li>&lt;assign&gt; &rarr; &lt;var&gt; = &lt;expr&gt;</li>
<li>&lt;expr&gt; &rarr; &lt;var&gt; + &lt;var&gt; | &lt;var&gt;</li>
<li>&lt;var&gt; &rarr; A | B | C</li>

</ul></li>

<li>tipo-real: sintetizado por &lt;var&gt; y &lt;expr&gt;</li>
<li>tipo-esperado: heredado por &lt;expr&gt;</li>

</ul>


<figure>
<p><img src="attribgram1.png" alt="attribgram1.png">
</p>
</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline10">
<div class="slide-header"></div>
<h3 id="orgheadline10">Gramáticas con atributos: Un Ejemplo</h3>
<ol>
<li>Regla sintáctica: &lt;assign&gt; &rarr; &lt;var&gt; = &lt;expr&gt;
<ul>
<li>Regla semántica: &lt;expr&gt;.tipo-esperado &larr; &lt;var&gt;.tipo-real</li>

</ul></li>
<li>Regla sintáctica: &lt;expr&gt; &rarr; &lt;var&gt;[ 2] + &lt;var&gt;[ 3]
<ul>
<li><p>
Regla semántica: &lt;expr&gt;.tipo-real  &larr;
</p>

<p>
if (&lt;var&gt;[ 2].tipo-real = int) and (&lt;var&gt;[ 3].tipo-real = int)
then int else real end if
</p></li>

<li>Predicado: &lt;expr&gt;.tipo-real = &lt;expr&gt;.tipo-esperado</li>

</ul></li>

<li>Regla sintáctica: &lt;expr&gt; &rarr; &lt;var&gt;
<ul>
<li>Regla semántica: &lt;expr&gt;.tipo-real &larr; &lt;var&gt;.tipo-real</li>
<li>Predicado: &lt;expr&gt;.tipo-real = &lt;expr&gt;.tipo-esperado</li>

</ul></li>

<li>Regla sintáctica: &lt;var&gt; &rarr; A | B | C
<ul>
<li>Regla semántica:  &lt;var&gt;.tipo-real &larr; lookup (&lt;var&gt;.string)</li>

</ul></li>

</ol>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline11">
<div class="slide-header"></div>
<h3 id="orgheadline11">Gramáticas con atributos</h3>
<ul>
<li>¿Cómo se computan los valores de atributos?
<ul>
<li>Si todos los atributos fueran heredados, el árbol podría ser
completado en un orden <i>top-down</i>.</li>
<li>Si todos los atributos fueran sintetizados, el árbol podría ser
completado en un orden <i>bottom-up</i></li>
<li>En muchos casos, ambos casos de atributos son utilizados y se
necesita una combinación de ambos órdenes.</li>

</ul></li>

</ul>


<figure>
<p><img src="attribgram2.png" alt="attribgram2.png">
</p>
</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline12">
<div class="slide-header"></div>
<h3 id="orgheadline12">Gramáticas con atributos</h3>
<ol>
<li>&lt;var&gt;.tipo-real &larr; look-up(A) (Regla 4)</li>
<li>&lt;expr&gt;.tipo-esperado &larr; &lt;var&gt;.tipo-real (Regla 1)</li>
<li><ul>
<li>&lt;var&gt;[ 2].tipo-real &larr; look-up(A) (Regla 4)</li>
<li>&lt;var&gt;[ 3].tipo-real &larr; look-up(B) (Regla 4)</li>

</ul></li>
<li>&lt;expr&gt;.tipo-real &larr; int o real (Regla 2)</li>

<li>&lt;expr&gt;.tipo-esperado = &lt;expr&gt;.tipo-real es VERDADERO o FALSO (Regla 2)</li>

</ol>


<figure>
<p><img src="attribgram3.png" alt="attribgram3.png">
</p>
</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline45">
<div class="slide-header"></div>
<h2 id="orgheadline45">Semántica Dinámica</h2>
<div class="outline-text-2" id="text-orgheadline45">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline14">
<div class="slide-header"></div>
<h3 id="orgheadline14">Métodos Desarrollados</h3>
<ul>
<li>Semántica Operacional
<ul>
<li>Operaciones en una máquina abstracta</li>

</ul></li>
<li>Semántica Denotacional
<ul>
<li>Usa funciones para especificar la semántica, los programas se
convierten en funciones para poder aplicar la teoría de funciones recursivas</li>

</ul></li>
<li>Semántica Axiomática
<ul>
<li>Aplica la lógica formal: afirmaciones (aserciones) para describir
suposiciones y resultados deseados</li>
<li>Los axiomas o reglas de inferencia son usados en cada tipo de
sentencias.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline17">
<div class="slide-header"></div>
<h3 id="orgheadline17">Semántica Operacional</h3>
<div class="outline-text-3" id="text-orgheadline17">
</div><div class="slide-footer"></div>
</section>
<section id="slide-orgheadline15">
<div class="slide-header"></div>
<h4 id="orgheadline15">Semántica Operacional</h4>
<ul>
<li>Describe el significado de un programa ejecutando sus sentencias
sobre una máquina, simulada o real. Los cambios en el estado de la
máquina (registros, memoria, etc) define el significado de la sentencia.</li>
<li>Para el uso de una semántica operacional en un lenguaje de alto
nivel se necesita una máquina virtual
<ul>
<li>Un intérprete de hardware puro podría ser muy costoso.</li>
<li>Un intérprete de software puro también tiene problemas
(dependiente de la máquina )</li>

</ul></li>
<li>Una mejor alternativa: Una simulación completa de la computadora
<ul>
<li>Construir un traductor del codigo fuente a un codigo maquina de
una computadora idealizada</li>
<li>Construir un simulador para la computadora idealizada</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline16">
<div class="slide-header"></div>
<h4 id="orgheadline16">Semántica Operacional</h4>
<ul>
<li>Simulador de Prolog en Prolog</li>

</ul>

<div class="org-src-container">

<pre  class="src src-prolog"><span style="color: #0000ff;">mi</span>(true).
<span style="color: #0000ff;">mi</span>((<span style="color: #b8860b;">A</span>,<span style="color: #b8860b;">B</span>)) :-
        mi(<span style="color: #b8860b;">A</span>),
        mi(<span style="color: #b8860b;">B</span>).
<span style="color: #0000ff;">mi1</span>(<span style="color: #b8860b;">Goal</span>) :-
        <span style="color: #b8860b;">Goal</span> \= true,
        <span style="color: #b8860b;">Goal</span> \= (<span style="color: #b8860b;">_</span>,<span style="color: #b8860b;">_</span>),
        clause(<span style="color: #b8860b;">Goal</span>, <span style="color: #b8860b;">Body</span>),
        mi(<span style="color: #b8860b;">Body</span>).
</pre>
</div>

<ul>
<li>Evaluación:
<ul>
<li>Bueno usado informalmente.</li>
<li>Extremadamente complejo usado formalmente.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline26">
<div class="slide-header"></div>
<h3 id="orgheadline26">Semántica Denotacional</h3>
<div class="outline-text-3" id="text-orgheadline26">
</div><div class="slide-footer"></div>
</section>
<section id="slide-orgheadline18">
<div class="slide-header"></div>
<h4 id="orgheadline18">Semántica Denotacional</h4>
<ul>
<li>Basado en la teoría de funciones recursivas</li>
<li>El método de descripción semántica mas abstracto</li>
<li>Originalmente desarrollado por Scott y Strachey (1970)</li>
<li>El proceso de construir una especificación denotacional para un
lenguaje es definir un objeto matemático por cada entidad del Lenguaje
<ul>
<li>Define una función que relaciona instancias de las entidades del
lenguaje con instancias de los objetos matemáticos correspondientes</li>

</ul></li>
<li>El significado de las construcciones del lenguaje son definidos solo
por los valores de las variables del programa</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline19">
<div class="slide-header"></div>
<h4 id="orgheadline19">Semántica Denotacional vs Semántica Operacional</h4>
<ul>
<li>En la semántica operacional los cambios de estado son definidos por
algoritmos codificados</li>
<li>En la semántica denotacional los cambios de estado son definidos por
funciones matemáticas rigurosas.</li>
<li>El estado de un programa son los valores de todas las variables
actuales  \(s = { < i_1,v_1 >,< i_2,v_2 >, ... ,< i_n,v_n > }\)</li>
<li>Sea  <i>VARMAP</i> una función que, cuando recibe un nombre de variable y
un estado retorna el valor actual de esa variable \(VARMAP(i_j, s) = v_j\)</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline20">
<div class="slide-header"></div>
<h4 id="orgheadline20">Números Decimales</h4>
<ul>
<li>&lt;dec-num&gt; &rarr; 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |</li>
<li>M<sub>dec</sub> ('0') = 0,  M<sub>dec</sub> ('1') = 1, &#x2026; , M<sub>dec</sub> ('9') = 9</li>
<li>M<sub>dec</sub> ( &lt;dec-num&gt; '0') = 10 * M<sub>dec</sub> ( &lt;dec-num&gt; )</li>
<li>M<sub>dec</sub> ( &lt;dec-num&gt; '1') = 10 * M<sub>dec</sub> ( &lt;dec-num&gt; ) + 1</li>
<li>&#x2026;</li>
<li>M<sub>dec</sub> ( &lt;dec-num&gt; '9') = 10 * M<sub>dec</sub> ( &lt;dec-num&gt; ) + 9</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline21">
<div class="slide-header"></div>
<h4 id="orgheadline21">Expresiones</h4>
<ul>
<li>relaciona expresiones a Z &cup; { error }</li>
<li>suponiendo que las expresiones son números decimales, variables, o
expresiones binarias teniendo un operador aritmético y dos
operandos, cada uno de los cuales puede ser una expresión.</li>
<li>M<sub>e</sub> ( &lt; expr &gt;, s) = case &lt; expr &gt; of 
<ul>
<li>&lt; dec-num &gt; &rarr; M<sub>dec</sub> ( &lt; dec-num &gt; , s)</li>
<li>&lt; var &gt; &rarr; if VARMAP(&lt; var &gt;, s)</li>
<li>&lt; binary-expr &gt; &rarr; 
<ul>
<li>if (M<sub>e</sub>(&lt; binary-expr &gt; . &lt;left-expr &gt; , s) = undef
<ul>
<li>OR M<sub>e</sub>(&lt; binary-expr &gt; . &lt; right-expr &gt; , s) = undef)</li>

</ul></li>
<li>then error</li>
<li>else
<ul>
<li>if (&lt; binary-expr &gt;.&lt; operator &gt; = ‘+’ then</li>
<li>M<sub>e</sub>(&lt; binary-expr &gt;.&lt; left-expr &gt;, s) + M<sub>e</sub>(&lt; binary-expr &gt;.&lt;
right-expr &gt;, s)</li>
<li>else M<sub>e</sub>(&lt; binary-expr &gt;.&lt; left-expr &gt;, s) * M<sub>e</sub>(&lt; binary-expr
&gt;.&lt; right-expr &gt;, s)</li>

</ul></li>

</ul></li>

</ul></li>
<li>&#x2026;</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline22">
<div class="slide-header"></div>
<h4 id="orgheadline22">asignación</h4>
<ul>
<li>M<sub>a</sub> ( X := E, s) = 
<ul>
<li>if M<sub>e</sub>(E, s) = error
<ul>
<li>then error</li>
<li>else s' = { &lt; i<sub>1</sub>',v<sub>1</sub>' &gt;, &lt; i<sub>2</sub>',v<sub>2</sub>' &gt;, &#x2026; , &lt; i<sub>n</sub>',v<sub>n</sub>' &gt;},
<ul>
<li>where for j = 1, 2, &#x2026; n,
<ul>
<li>v<sub>j</sub>' = varmap(i<sub>j</sub>, s) if i<sub>j</sub> &lt;&gt; x
<ul>
<li>= M<sub>e</sub>(E, s) if i<sub>j</sub> = x</li>

</ul></li>

</ul></li>

</ul></li>

</ul></li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline23">
<div class="slide-header"></div>
<h4 id="orgheadline23">Ciclo 'while'</h4>
<ul>
<li>M<sub>l</sub>(while B do L, s) =
<ul>
<li>if M<sub>b</sub>(B, s) = undef
<ul>
<li>then error</li>
<li>else if M<sub>b</sub>(B, s) = false
<ul>
<li>then s</li>
<li>else if M<sub>sl</sub>(L, s) = error
<ul>
<li>then error</li>
<li>else M<sub>l</sub>(while B do L, M<sub>sl</sub>(L, s))</li>

</ul></li>

</ul></li>

</ul></li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline24">
<div class="slide-header"></div>
<h4 id="orgheadline24">Ciclo</h4>
<ul>
<li>El significado del ciclo es el valor de las variables del programa
después de que las sentencias del ciclo han sido ejecutadas el
número prescrito de veces, asumiendo que no ha habido errores</li>
<li>En esencia el ciclo ha sido convertido de iterativo a recursivo,
donde el control recursivo es definido por otra función recursiva de estados</li>
<li>La recursión comparada con la iteración es mas facil de describir
con rigor matemático</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline25">
<div class="slide-header"></div>
<h4 id="orgheadline25">Evaluación</h4>
<ul>
<li>Puede ser usado para probar la corrección de programas</li>
<li>Provee un modo riguroso de pensar los programas</li>
<li>Puede ser una ayuda al diseño de lenguajes</li>
<li>Ha sido usado en sistemas de generación de compiladores</li>
<li>A causa de su complejidad es de poco uso para los usuarios del lenguaje</li>

</ul>



<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgheadline44">
<div class="slide-header"></div>
<h3 id="orgheadline44">Semántica Axiomática</h3>
<div class="outline-text-3" id="text-orgheadline44">
</div><div class="slide-footer"></div>
</section>
<section id="slide-orgheadline27">
<div class="slide-header"></div>
<h4 id="orgheadline27">Semántica Axiomática</h4>
<ul>
<li>Basado en Lógica Formal (cálculo de predicados)</li>
<li>Propósito original: Verificación formal de programas</li>
<li>Axiomas o reglas de inferencia son definidas para cada tipo de
sentencia del lenguaje (para permitir transformaciones de
expresiones a otras expresiones)</li>
<li>Las expresiones son llamadas <i>aserciones</i> (afirmaciones)</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline28">
<div class="slide-header"></div>
<h4 id="orgheadline28">Semántica Axiomática</h4>
<ul>
<li>Una aserción antes de una sentencia (una <i>precondición</i> establece
las relaciones y restricciones entre variables que son verdaderas en
ese punto de la ejecución</li>
<li>Una aserción que sigue a una sentencia es una <i>postcondición</i></li>
<li>Una <i>precondición mas débil</i> es la menos restrictiva precondición
que garantiza la postcondición</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline29">
<div class="slide-header"></div>
<h4 id="orgheadline29">Semántica Axiomática</h4>
<ul>
<li>La Forma es {P} sentencia {Q}</li>
<li>Un ejemplo
<ul>
<li>a = b + 1 {a &gt; 1}</li>
<li>una posible precondición: {b &gt; 10)</li>
<li><i>precondición mas débil</i>: {b &gt; 0}</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline30">
<div class="slide-header"></div>
<h4 id="orgheadline30">Proceso de prueba de programa</h4>
<ul>
<li>La postcondición para el programa entero es el resultado deseado
<ul>
<li>Se trabaja hacia atrás a través del programa hasta la primer
sentencia. Si la precondición sobre la primer sentencias está
inferida por la especificación de entrada del programa, entonces
el programa es correcto.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline31">
<div class="slide-header"></div>
<h4 id="orgheadline31">Axiomas</h4>
<ul>
<li>Un axioma para la asignación
<ul>
<li>( x = E ): \( \{Q_{x \to E}\} \ x = E \ \{Q\} \)</li>

</ul></li>
<li><p>
La regla de la Consecuencia
</p>

<p>
\[ \frac{ \{P\} \ S \ \{Q\}, P' \Rightarrow P, Q \Rightarrow
  Q'}{\{P'\} \ S \ \{Q'\}} \]
</p></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline32">
<div class="slide-header"></div>
<h4 id="orgheadline32">Axiomas</h4>
<ul>
<li class="fragment roll-in">\( x = 2 * y - 3 \{x > 25 \}  \)</li>
<li class="fragment roll-in">\( 2 * y - 3 > 25  \)</li>
<li class="fragment roll-in">\( y > 14  \)</li>
<li class="fragment roll-in">\( x = x + y - 3 \{x > 10 \}  \)</li>
<li class="fragment roll-in">\( x + y - 3 > 10  \)</li>
<li class="fragment roll-in">\( y > 13 - x  \)</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline33">
<div class="slide-header"></div>
<h4 id="orgheadline33">Axiomas</h4>
<p>
\[ \frac{ \{x > 3\} \ x = x - 3 \ \{x > 0\}, (x > 5) \Rightarrow (x >
  3), (x > 0) \Rightarrow (X > 0)}{\{x > 5\} \ x = x - 3 \ \{x > 0\}} \]
</p>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline34">
<div class="slide-header"></div>
<h4 id="orgheadline34">Axiomas</h4>
<ul>
<li>Una regla de inferencia para secuencias
<ul>
<li>\( \{P1\} S1 \{P2\} \)</li>
<li>\( \{P2\} S2 \{P3\} \)</li>

</ul></li>

</ul>

<p>
\[ \frac{ \{P1\} \ S1 \ \{P2\}, \{P2\} \ S2 \ \{P3\}}{\{P1\} \ S1;S2 \ \{P3\}} \]
</p>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline35">
<div class="slide-header"></div>
<h4 id="orgheadline35">Axiomas</h4>
<ul>
<li>\( y = 3 * x + 1  \);</li>

<li>\( x =  y + 3 \);</li>

<li>\(\{ x < 10 \}  \)</li>

</ul>

<p>
La precondición para la segunda asignación es \( y < 7 \) la cual es
usada como postcondición para la primer sentencia. La precondición
para la primera asignación puede ser computada 
</p>

<ul>
<li>\( 3 * x + 1 < 7  \)</li>

<li>\( x < 2 \)</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline36">
<div class="slide-header"></div>
<h4 id="orgheadline36">Axiomas</h4>
<ul>
<li><p>
regla de inferencia para sentencias de selección  <i>if</i>
</p>

<p>
{P} <b>if</b> B <b>then</b> S1 <b>else</b> S2 {Q}
</p></li>

</ul>

<p>
\[ \frac{ \{B \ and \ P \} \ S1 \ \{Q\}, \{(not B) \ and \ P\} \ S2 \ 
\{Q\}}{\{P\} \ if \ B \ then \ S1 \ else \ S2 \ \{Q\}}\]
</p>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline37">
<div class="slide-header"></div>
<h4 id="orgheadline37">Ejemplo</h4>
<ul>
<li><b>if</b> \( x > 0 \) <b>then</b> \( y = y - 1 \) <b>else</b> \(  y =  y + 1  \)</li>

</ul>
<ul>
<li class="fragment roll-in">con la postcondición \( \{ y > 0 \} \)</li>
<li class="fragment roll-in">el axioma de asignación para la clausula <b>then</b>: \( y = y - 1  \{ y
  > 0 \} \)  produce \( \{ y - 1 > 0 \} \) o \( \{ y > 1 \} \)</li>
<li class="fragment roll-in">el axioma de asignación para la clausula <b>else</b>: \( y = y + 1  \{ y
  > 0 \} \)  produce \( \{ y + 1 > 0 \} \) o \( \{ y > -1 \} \)</li>
<li class="fragment roll-in">Como \( \{ y > 1 \} \Rightarrow \{ y > -1 \}\) la regla de
consecuencia nos permite usar \( \{ y > 1 \} \) como precondición
del total de la sentencia</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline38">
<div class="slide-header"></div>
<h4 id="orgheadline38">Axiomas</h4>
<ul>
<li><p>
Una regla de inferencia para un ciclo <i>while</i>
</p>

<p>
{P} <b>while</b> B <b>do</b> S <b>end</b> {Q}
</p></li>

</ul>

<p>
\[ \frac{ (I \ and \ B ) S \{I\} }{\{I\} \ while \ B \ do \ S \{I \
and (not B)\}} \]
</p>

<p>
donde <i>I</i> es el <i>invariante</i> (la hipótesis inductiva)
</p>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline39">
<div class="slide-header"></div>
<h4 id="orgheadline39">Axiomas</h4>
<ul>
<li>Características del <i>invariante</i>: <i>I</i> debe satisfacer las siguientes
condiciones:
<ul>
<li>\( P \Rightarrow I \) el invariante debe ser inicialmente verdadero</li>
<li>\( \{I\} \ B \ \{I\}  \) la evaluación de la parte booleana no
debe cambiar la validez de <i>I</i></li>
<li>\( \{I \ and \ B \} \ S \ \{I\}  \) <i>I</i> no cambia por la ejecución
del cuerpo del ciclo  iterativo</li>
<li>\( (I \ and \ (not \ B)) \Rightarrow Q \) si <i>I</i> es verdadero y
<i>B</i> es falso es implicado <i>Q</i></li>
<li>El ciclo termina</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline40">
<div class="slide-header"></div>
<h4 id="orgheadline40">Ejemplo</h4>
<ul>
<li><b>while</b> \( y <> x \) <b>do</b> \( y = y + 1 \) <b>end</b> \( \{ y = x \} \)</li>

</ul>
<ul>
<li class="fragment roll-in">Para cero iteraciones la precondición mas débil es \( \{ y = x \} \)</li>
<li class="fragment roll-in">Para una iteración es: \[ wp( y = y + 1, \{y = x\}) = \{ y + 1 = x \} = \{ y = x - 1 \} \]</li>
<li class="fragment roll-in">Para dos iteraciones es:\[ wp( y = y + 1, \{y = x - 1\}) = \{ y + 1 = x - 1\} = \{ y = x - 2 \} \]</li>
<li class="fragment roll-in">Para tres iteraciones es:\[ wp( y = y + 1, \{y = x - 2\}) = \{ y + 1 = x - 2\} = \{ y = x - 3 \} \]</li>
<li class="fragment roll-in">Es obvio que \(\{y <  x \} \)es suficiente para los casos de uno o mas
iteraciones. Combinado con \(\{y = x \} \)para el caso base
obtenemos  \( \{y <= x \}\), que puede ser el invariante del ciclo.</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline41">
<div class="slide-header"></div>
<h4 id="orgheadline41">Ejemplo</h4>
<ul>
<li>\( P \Rightarrow I \) \( \{y <= x \} \Rightarrow \{y <= x \} \)</li>
<li>\( \{I\} \ B \ \{I\}  \)  \( \{y <= x \} \ \{y <> x \}  \ \{y <= x\}  \)</li>
<li>\( \{I \ and \ B \} \ S \ \{I\}  \) \( \{y <= x \ and \ y <> x \}
    \ y = y + 1 \ \{y <= x\}  \) aplicando el axioma de asignación a \( y
    = y + 1 \{ y <= x \} \) tenemos \( \{y + 1 <= x \}\) que es
equivalente a \( \{y < x \}\) el cual es implicado por \( \{y < x
    \ and \ y <> x\}\).</li>
<li>\( (I \ and \ (not \ B)) \Rightarrow Q \) \( \{(y <= x) \ and \ (not
    \ y <> x)\} \Rightarrow \{y = x\} \) sigue \( \{(y <= x) \ and \ (y
    = x)\} \Rightarrow \{y = x\} \) sigue \( \{y = x \} \Rightarrow \{y = x\} \)</li>
<li>El ciclo termina</li>

</ul>


<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline42">
<div class="slide-header"></div>
<h4 id="orgheadline42">Invariante</h4>
<ul>
<li>El invariante es la versión mas debil de la postcondición del ciclo,
y es también una precondición.</li>
<li>Debe ser lo suficientemente debil para satsifacer a priori el
comienzo del ciclo, pero cuando se combina con la condición de
salida debe ser los suficientemente fuerte para forzar la verdad de
la postcondición</li>

</ul>

<div class="slide-footer"></div>
</section>
<section id="slide-orgheadline43">
<div class="slide-header"></div>
<h4 id="orgheadline43">Evaluación</h4>
<ul>
<li>Desarrollar axiomas y reglas de inferencia para todas las
sentencias en un lenguaje es dificultoso</li>
<li>Es una buena herramienta para la verificación de programas y un
excelente marco para razonar los programas, pero no es útil para los
usuarios del lenguaje y desarrolladores de compiladores</li>

</ul>
<div class="slide-footer"></div>
</section>
</section>
</div>
</div>
<script src="../reveal.js-master/lib/js/head.min.js"></script>
<script src="../reveal.js-master/js/reveal.js"></script>

<script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

controls: true,
progress: true,
history: false,
center: true,
slideNumber: true,
rollingLinks: false,
keyboard: true,
overview: true,

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'cube', // default/cube/page/concave/zoom/linear/fade/none
transitionSpeed: 'default',
multiplex: {
    secret: '', // null if client
    id: '', // id, obtained from socket.io server
    url: '' // Location of socket.io server
},

// Optional libraries used to extend on reveal.js
dependencies: [
]
,});
</script>
</body>
</html>

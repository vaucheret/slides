<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Conceptos Avanzados en Lenguajes de Programación</title>
<meta name="author" content="(Implementación de Subrutinas)"/>
<style type="text/css">
.underline { text-decoration: underline; }
</style>
<link rel="stylesheet" href="../reveal.js-master/css/reveal.css"/>

<link rel="stylesheet" href="../reveal.js-master/css/theme/solarized.css" id="theme"/>


<!-- If the query includes 'print-pdf', include the PDF print sheet -->
<script>
    if( window.location.search.match( /print-pdf/gi ) ) {
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = '../reveal.js-master/css/print/pdf.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    }
</script>
</head>
<body>
<div class="reveal">
<div class="slides">
<section id="sec-title-slide" data-background="" data-background-size="" data-background-repeat="" data-background-transition=""><h1 class="title">Conceptos Avanzados en Lenguajes de Programación</h1><h2 class="author">Implementación de Subrutinas</h2><h2 class="date">2016-09-27 mar 00:00</h2><p class="date">Created: 2017-09-18 lun 12:56</p>
</section>
<section id="table-of-contents">
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#/slide-org6047db3">Semántica General de Llamada y Retorno</a>
<ul>
<li><a href="#/slide-orgf4ac057">Semántica General de Llamada y Retorno</a></li>
</ul>
</li>
<li><a href="#/slide-orgb1d4fcb">Subprogramas Simples</a>
<ul>
<li><a href="#/slide-org2b589b5">Subprogramas Simples: LLamada</a></li>
<li><a href="#/slide-orgbae05b7">Subprogramas Simples: Retorno</a></li>
<li><a href="#/slide-org96da88b">Subprogramas Simples: Partes</a></li>
<li><a href="#/slide-org7322217">Código y Registros de Activación</a></li>
</ul>
</li>
<li><a href="#/slide-org996b7bc">Subprogramas con Variables locales en Pila Dinámica</a>
<ul>
<li><a href="#/slide-orgc8172d2">Subprogramas con Variables locales en Pila Dinámica</a></li>
<li><a href="#/slide-org35f9766">Típico registro de activación para variables locales alojadas en pila dinamica</a></li>
<li><a href="#/slide-org9a9741f">Ejemplo de Función en <b>C</b></a></li>
<li><a href="#/slide-org527d3ae">Ejemplo sin recursividad</a></li>
<li><a href="#/slide-org4fee982">Ejemplo sin recursividad</a></li>
<li><a href="#/slide-org8989ce9">Cadena Dinámica y desplazamiento local</a></li>
<li><a href="#/slide-org1722df5">Un Ejemplo con Recursividad</a></li>
<li><a href="#/slide-org6c6aaca">Un Ejemplo con Recursividad</a></li>
<li><a href="#/slide-orga001ab4">Un Ejemplo con Recursividad</a></li>
<li><a href="#/slide-orgd7eaa63">Un Ejemplo con Recursividad</a></li>
</ul>
</li>
<li><a href="#/slide-orgfd38602">Subprogramas imbricados</a>
<ul>
<li><a href="#/slide-org6f802fd">Subprogramas imbricados</a></li>
<li><a href="#/slide-orgae00c28">Localizar una Referencia no local</a></li>
<li><a href="#/slide-org543019a">Alcance Estático</a></li>
<li><a href="#/slide-org96c9802">Ejemplo</a></li>
<li><a href="#/slide-orgeabee71">Contenido de la Pila en pos 1</a></li>
<li><a href="#/slide-org62b0470">Display</a></li>
</ul>
</li>
<li><a href="#/slide-org08e550a">Bloques</a>
<ul>
<li><a href="#/slide-org7d019a3">Bloques</a></li>
<li><a href="#/slide-orgaac2f42">Implementando bloques</a></li>
<li><a href="#/slide-org07cdc17">Ejemplo</a></li>
<li><a href="#/slide-orgd78e59d">Ejemplo</a></li>
</ul>
</li>
<li><a href="#/slide-org9dc33da">Implementando Alcance Dinámico</a>
<ul>
<li><a href="#/slide-org90f249a">Implementando Alcance Dinámico</a></li>
<li><a href="#/slide-orgbf3bac7">Ejemplo</a></li>
<li><a href="#/slide-orgd8e3647">Ejemplo cadena dinámica</a></li>
<li><a href="#/slide-org145f083">Ejemplo con tabla central</a></li>
</ul>
</li>
</ul>
</div>
</nav>
</section>

<section>
<section id="slide-org6047db3">
<div class="slide-header"></div>
<h2 id="org6047db3">Semántica General de Llamada y Retorno</h2>
<div class="outline-text-2" id="text-org6047db3">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgf4ac057">
<div class="slide-header"></div>
<h3 id="orgf4ac057">Semántica General de Llamada y Retorno</h3>
<ul>
<li>Semánticamente es como si el subprograma se insertara en
el punto de su llamada (no es siempre asi)</li>
<li>En un lenguaje de Programación, las operaciones de llamado y retorno
de subprogramas son llamadas en conjunto <i>articulación de subprogramas</i></li>
<li>La llamada a un subprograma tiene varias acciones asociadas con:
<ul>
<li>El método de pasaje de parámetros</li>
<li>variables locales estáticas</li>
<li>Estado de ejecución del programa llamador</li>
<li>transferencia del control</li>
<li>Estructura de anidamiento de los subprogramas</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgb1d4fcb">
<div class="slide-header"></div>
<h2 id="orgb1d4fcb">Subprogramas Simples</h2>
<div class="outline-text-2" id="text-orgb1d4fcb">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org2b589b5">
<div class="slide-header"></div>
<h3 id="org2b589b5">Subprogramas Simples: LLamada</h3>
<ul>
<li>Grabar el estado de ejecución del llamador</li>
<li>llevar a cabo el proceso de pasaje de parámetros</li>
<li>Pasar la dirección de retorno al subprograma llamado</li>
<li>Transferir el control al programa llamado</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgbae05b7">
<div class="slide-header"></div>
<h3 id="orgbae05b7">Subprogramas Simples: Retorno</h3>
<ul>
<li>Si se usó pasaje de parametros por valor-resultado, mover los
valores actuales a esos parametors a sus correspondientes parametros reales</li>
<li>Si es una función, mover el resultado al lugar donde el llamador
pueda obtenerlo</li>
<li>Restaurar el estado de ejecución del llamador</li>
<li>Retornar el control al llamador</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org96da88b">
<div class="slide-header"></div>
<h3 id="org96da88b">Subprogramas Simples: Partes</h3>
<ul>
<li>Dos partes separadas: El Código y los Datos (variables locales y
datos que pueden cambiar)</li>
<li>El formato de la parte de datos de un subprograma en ejecución se
llama <i>registro de activación</i>.</li>
<li>Una <i>instancia de un registro de activación</i> es un ejemplo concreto
de un registro de activación.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org7322217">
<div class="slide-header"></div>
<h3 id="org7322217">Código y Registros de Activación</h3>

<figure>
<img src="simpleactreg.png" alt="simpleactreg.png"> 

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org996b7bc">
<div class="slide-header"></div>
<h2 id="org996b7bc">Subprogramas con Variables locales en Pila Dinámica</h2>
<div class="outline-text-2" id="text-org996b7bc">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgc8172d2">
<div class="slide-header"></div>
<h3 id="orgc8172d2">Subprogramas con Variables locales en Pila Dinámica</h3>
<ul>
<li>Registros de activación mas complejos
<ul>
<li>El compilador debe generar código para alojar y desalojar
implícitamente las variables locales</li>
<li>Se debe soportar recursividad  (posibilidad de múltiples activaciones
simultáneas de un subprograma)</li>

</ul></li>
<li>El formato y muchas veces el tamaño es conocido en tiempo de compilación</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org35f9766">
<div class="slide-header"></div>
<h3 id="org35f9766">Típico registro de activación para variables locales alojadas en pila dinamica</h3>

<figure>
<img src="regactpila.png" alt="regactpila.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org9a9741f">
<div class="slide-header"></div>
<h3 id="org9a9741f">Ejemplo de Función en <b>C</b></h3>
<div class="org-src-container">

<pre  class="src src-C"><span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">sub</span>(<span style="color: #9ac0cd;">float</span> <span style="color: #bebebe; font-weight: bold;">total</span>, <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">part</span>) {
  <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">list</span>[5];
  <span style="color: #9ac0cd;">float</span> <span style="color: #bebebe; font-weight: bold;">sum</span>;
   ...
}
</pre>
</div>


<figure>
<img src="ejemregact.png" alt="ejemregact.png" width="250px">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org527d3ae">
<div class="slide-header"></div>
<h3 id="org527d3ae">Ejemplo sin recursividad</h3>
<div class="org-src-container">

<pre  class="src src-C"><span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">fun1</span>(<span style="color: #9ac0cd;">float</span> <span style="color: #bebebe; font-weight: bold;">r</span>) {
  <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">s</span>, <span style="color: #bebebe; font-weight: bold;">t</span>;
   ...  &lt;-------- 1
  fun2(s);
  ....
}
<span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">fun2</span>(<span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">x</span>) {
  <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">y</span>;
  ... &lt;---------- 2
  fun3(y)
  ... 
}
<span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">fun3</span>(<span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">q</span>) {
...    &lt;--------- 3
}
<span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">main</span>() {
<span style="color: #9ac0cd;">float</span> <span style="color: #bebebe; font-weight: bold;">p</span>;
...
fun1(p);
...
}
</pre>
</div>

<p>
main llama a B, B llama a A y A llama a C
</p>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org4fee982">
<div class="slide-header"></div>
<h3 id="org4fee982">Ejemplo sin recursividad</h3>

<figure>
<img src="ejemsinrec.png" alt="ejemsinrec.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org8989ce9">
<div class="slide-header"></div>
<h3 id="org8989ce9">Cadena Dinámica y desplazamiento local</h3>
<ul>
<li>el conjunto  de ligaduras dinámicas y la Pila en un tiempo dada se
llama <i>cadena dinámica</i> o <i>cadena de llamadas</i></li>
<li>Las variables locales se pueden acceder a partir de su
desplazamiento desde el comienzo del registro de activación. Se
llama <i>desplazamiento local</i></li>
<li>El desplazamiento local puede ser determinado en tiempo de compilación.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org1722df5">
<div class="slide-header"></div>
<h3 id="org1722df5">Un Ejemplo con Recursividad</h3>
<ul>
<li>El registro de activación del ejemplo previo soporta recursividad,
e.g.</li>

</ul>

<div class="org-src-container">

<pre  class="src src-C"><span style="color: #9ac0cd;">int</span> <span style="color: #1e90ff; font-weight: bold;">factorial</span>(<span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">n</span>) {
  &lt;-------  1
  <span style="color: #40e0d0; font-weight: bold;">if</span> (n &lt;= 1)
   <span style="color: #40e0d0; font-weight: bold;">return</span> 1;
  <span style="color: #40e0d0; font-weight: bold;">else</span> <span style="color: #40e0d0; font-weight: bold;">return</span> (n * factorial(n - 1));
  &lt;-------- 2
}
<span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">main</span>() {
 <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">value</span>;
 value = factorial(3);
  &lt;--------- 3
}

</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org6c6aaca">
<div class="slide-header"></div>
<h3 id="org6c6aaca">Un Ejemplo con Recursividad</h3>

<figure>
<img src="firstfactorial.png" alt="firstfactorial.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orga001ab4">
<div class="slide-header"></div>
<h3 id="orga001ab4">Un Ejemplo con Recursividad</h3>

<figure>
<img src="seconfactorial.png" alt="seconfactorial.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgd7eaa63">
<div class="slide-header"></div>
<h3 id="orgd7eaa63">Un Ejemplo con Recursividad</h3>

<figure>
<img src="thirdfactorial.png" alt="thirdfactorial.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgfd38602">
<div class="slide-header"></div>
<h2 id="orgfd38602">Subprogramas imbricados</h2>
<div class="outline-text-2" id="text-orgfd38602">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org6f802fd">
<div class="slide-header"></div>
<h3 id="org6f802fd">Subprogramas imbricados</h3>
<ul>
<li>Algunos lenguajes de alcance estático no basados en C (fortran 95,
Ada, JavaScript) usan variables locales alojadas en Pila Dinámicas y
permiten que los subprogramas estén imbricados</li>
<li>Todas las variables que pueden ser accedidas no localmente residen
en alguna instancia de un registro de activación en la Pila</li>
<li>El proceso de localizar una referencia no local incluye:
<ol>
<li>Encontrar la instancia del registro de activación correcta</li>
<li>Determinar el correcto desplazamiento dentro del registro</li>

</ol></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgae00c28">
<div class="slide-header"></div>
<h3 id="orgae00c28">Localizar una Referencia no local</h3>
<ul>
<li>Encontrar el desplazamiento es trivial</li>
<li>Para encontrar la correcta instancia del registro de activación
<ul>
<li>Las reglas semánticas del alcance estático garantizan que toda
variable no local que pueda ser referenciada ha sido alojada en
alguna instancia de un registro de activación en la Pila cuando la
referencia es hecha.</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org543019a">
<div class="slide-header"></div>
<h3 id="org543019a">Alcance Estático</h3>
<ul>
<li>Una <i>cadena estática</i> es una cadena de <i>punteros estáticos</i> que
conectan ciertas instancias de registros de activación</li>
<li>El puntero estático en una instancia de un registro de activación
para un subprograma A apunta a una de las instancias del registro de
activación del padre de A en la estructura estática.</li>
<li>La cadena estática de una istancia de un registro de activación
la conecta con todos sus ancestros en la estructura estática.</li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org96c9802">
<div class="slide-header"></div>
<h3 id="org96c9802">Ejemplo</h3>
<div class="org-src-container">

<pre  class="src src-pascal"><span style="color: #40e0d0; font-weight: bold;">procedure</span> <span style="color: #1e90ff; font-weight: bold;">MAIN_2</span> is
  X : <span style="color: #9ac0cd;">Integer</span>;
  <span style="color: #40e0d0; font-weight: bold;">procedure</span> <span style="color: #1e90ff; font-weight: bold;">Bigsub</span> is
    A, B, C : <span style="color: #9ac0cd;">Integer</span>;
    <span style="color: #40e0d0; font-weight: bold;">procedure</span> <span style="color: #1e90ff; font-weight: bold;">Sub1</span> is
      A, D : <span style="color: #9ac0cd;">Integer</span>;
      <span style="color: #40e0d0; font-weight: bold;">begin</span> - - <span style="color: #40e0d0; font-weight: bold;">of</span> Sub1
      A := B + C; &lt;---------- 1
    <span style="color: #40e0d0; font-weight: bold;">end</span>; - - <span style="color: #40e0d0; font-weight: bold;">of</span> Sub1
    <span style="color: #40e0d0; font-weight: bold;">procedure</span> <span style="color: #1e90ff; font-weight: bold;">Sub2</span>(X : <span style="color: #9ac0cd;">Integer</span>) is
      B, E : <span style="color: #9ac0cd;">Integer</span>;
      <span style="color: #40e0d0; font-weight: bold;">procedure</span> <span style="color: #1e90ff; font-weight: bold;">Sub3</span> is
         C, E: <span style="color: #9ac0cd;">Integer</span>;
         <span style="color: #40e0d0; font-weight: bold;">begin</span>  -- <span style="color: #40e0d0; font-weight: bold;">of</span> Sub3
         sub1;
         E := B + A; &lt;--------- 2
      <span style="color: #40e0d0; font-weight: bold;">end</span>; -- <span style="color: #40e0d0; font-weight: bold;">of</span> Sub3
      <span style="color: #40e0d0; font-weight: bold;">begin</span>   -- <span style="color: #40e0d0; font-weight: bold;">of</span> Sub2
      sub3;
      A := D + E; &lt;-------------3 
    <span style="color: #40e0d0; font-weight: bold;">end</span>  -- <span style="color: #40e0d0; font-weight: bold;">of</span> Sub2
    <span style="color: #40e0d0; font-weight: bold;">begin</span> -- <span style="color: #40e0d0; font-weight: bold;">of</span> Bigsub
    sub2(7);
  <span style="color: #40e0d0; font-weight: bold;">end</span> -- <span style="color: #40e0d0; font-weight: bold;">of</span> Bigsub
  <span style="color: #40e0d0; font-weight: bold;">begin</span> -- <span style="color: #40e0d0; font-weight: bold;">of</span> Main_2
  Bigsub;
<span style="color: #40e0d0; font-weight: bold;">end</span> -- <span style="color: #40e0d0; font-weight: bold;">of</span> Main_2
</pre>
</div>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgeabee71">
<div class="slide-header"></div>
<h3 id="orgeabee71">Contenido de la Pila en pos 1</h3>

<figure>
<img src="ejemploestatico.png" alt="ejemploestatico.png" width="350px">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org62b0470">
<div class="slide-header"></div>
<h3 id="org62b0470">Display</h3>
<ul>
<li>Una alternativa a las cadenas estáticas</li>
<li>Los punteros estáticos son almacenados en un arreglo único llamado display</li>
<li>El contenido del display en un tiempo dado es una lista de las
direcciones de las instancias de los registros de activación accesibles</li>

</ul>
<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org08e550a">
<div class="slide-header"></div>
<h2 id="org08e550a">Bloques</h2>
<div class="outline-text-2" id="text-org08e550a">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org7d019a3">
<div class="slide-header"></div>
<h3 id="org7d019a3">Bloques</h3>
<ul>
<li>Los bloques son alcances locales para variables especificados por el usuario</li>
<li>Un ejemplo en C</li>

</ul>
<div class="org-src-container">

<pre  class="src src-c">{ <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">temp</span>; 
  temp = list[upper];
  list[upper] = list [lower];
  list[lower] = temp
}
</pre>
</div>
<ul>
<li>El tiempo de vida de <i>temp</i> en el ejemplo comienza cuando el control
entra en el bloque</li>
<li>La ventaja de usar una variable local como temp es que no interfiere
con otra variable del mismo nombre</li>

</ul>
<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgaac2f42">
<div class="slide-header"></div>
<h3 id="orgaac2f42">Implementando bloques</h3>
<ul>
<li>Dos métodos
<ol>
<li>Tratar a los bloques como subprogramas sin parámetros que son
siempre llamados desde la misma ubicación
<ul>
<li>Todo bloque tiene un registro de activación, una instancia es
creada cada vez que el bloque es ejecutado</li>

</ul></li>
<li>Ya que el máximo de almacenamiento requerido para un bloque puede
ser determinado estáticamente, esta cantidad de espacio puede ser
alojada después de las variables locales del registro de activación</li>

</ol></li>

</ul>
<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org07cdc17">
<div class="slide-header"></div>
<h3 id="org07cdc17">Ejemplo</h3>
<div class="org-src-container">

<pre  class="src src-c"><span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">main</span>() {
   <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">x</span>, <span style="color: #bebebe; font-weight: bold;">y</span>, <span style="color: #bebebe; font-weight: bold;">z</span>;
   <span style="color: #40e0d0; font-weight: bold;">while</span> ( ... ) {
     <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">a</span>, <span style="color: #bebebe; font-weight: bold;">b</span>, <span style="color: #bebebe; font-weight: bold;">c</span>;
     ...
     <span style="color: #40e0d0; font-weight: bold;">while</span> ( ... ) {
       <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">d</span>, <span style="color: #bebebe; font-weight: bold;">c</span>;
       ...
     }
   }
   <span style="color: #40e0d0; font-weight: bold;">while</span> ( ... ) {
      <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">f</span>, <span style="color: #bebebe; font-weight: bold;">g</span>;
      ...
   }
}
</pre>
</div>
<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgd78e59d">
<div class="slide-header"></div>
<h3 id="orgd78e59d">Ejemplo</h3>

<figure>
<img src="bloque.png" alt="bloque.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org9dc33da">
<div class="slide-header"></div>
<h2 id="org9dc33da">Implementando Alcance Dinámico</h2>
<div class="outline-text-2" id="text-org9dc33da">
</div><div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org90f249a">
<div class="slide-header"></div>
<h3 id="org90f249a">Implementando Alcance Dinámico</h3>
<ul>
<li><i>Acceso Profundo</i>: Las referencias no locales son encontradas
buscando las instancias de los registros de activación en la cadena dinámica</li>
<li><i>Acceso Superficial</i>: Se colocan las variables locales en una tabla central
<ul>
<li>Una pila por cada nombre de variable</li>
<li>Tabla central con una entrada por cada nombre de variable</li>

</ul></li>

</ul>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgbf3bac7">
<div class="slide-header"></div>
<h3 id="orgbf3bac7">Ejemplo</h3>
<div class="org-src-container">

<pre  class="src src-c"><span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">sub3</span>() {
  <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">x</span>, <span style="color: #bebebe; font-weight: bold;">z</span>;
  x = u + v;
}

<span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">sub2</span>() {
  <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">w</span>, <span style="color: #bebebe; font-weight: bold;">x</span>;
  ... 
}

<span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">sub1</span>() {
  <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">v</span>, <span style="color: #bebebe; font-weight: bold;">w</span>;
  ... 
}

<span style="color: #9ac0cd;">void</span> <span style="color: #1e90ff; font-weight: bold;">main</span>() {
  <span style="color: #9ac0cd;">int</span> <span style="color: #bebebe; font-weight: bold;">v</span>, <span style="color: #bebebe; font-weight: bold;">u</span>;
  ... 
}
</pre>
</div>
<p>
<i>main</i> llama a <i>sub1</i>, <i>sub1</i> llama a <i>sub1</i>, <i>sub1</i> llama a <i>sub2</i> y <i>sub2</i> llama a <i>sub3</i>
</p>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-orgd8e3647">
<div class="slide-header"></div>
<h3 id="orgd8e3647">Ejemplo cadena dinámica</h3>

<figure>
<img src="dinamicchain.png" alt="dinamicchain.png">

</figure>

<div class="slide-footer"></div>
</section>
</section>
<section>
<section id="slide-org145f083">
<div class="slide-header"></div>
<h3 id="org145f083">Ejemplo con tabla central</h3>

<figure>
<img src="tablacentral.png" alt="tablacentral.png">

</figure>
<div class="slide-footer"></div>
</section>
</section>
</div>
</div>
<script src="../reveal.js-master/lib/js/head.min.js"></script>
<script src="../reveal.js-master/js/reveal.js"></script>

<script>
// Full list of configuration options available here:
// https://github.com/hakimel/reveal.js#configuration
Reveal.initialize({

controls: true,
progress: true,
history: false,
center: true,
slideNumber: 't',
rollingLinks: false,
keyboard: true,
overview: true,

theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
transition: Reveal.getQueryHash().transition || 'cube', // default/cube/page/concave/zoom/linear/fade/none
transitionSpeed: 'default',
multiplex: {
    secret: '', // null if client
    id: '', // id, obtained from socket.io server
    url: '' // Location of socket.io server
},

// Optional libraries used to extend on reveal.js
dependencies: [
 { src: '../reveal.js-master/lib/js/classList.js', condition: function() { return !document.body.classList; } },
 { src: '../reveal.js-master/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: '../reveal.js-master/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
 { src: '../reveal.js-master/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
 { src: '../reveal.js-master/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }]
,});
</script>
</body>
</html>

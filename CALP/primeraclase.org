#+OPTIONS: reveal_center:t reveal_control:t reveal_height:-1
#+OPTIONS: reveal_history:nil reveal_keyboard:t reveal_overview:t
#+OPTIONS: reveal_progress:t reveal_rolling_links:nil
#+OPTIONS: reveal_single_file:nil reveal_slide_number:t num:nil
#+OPTIONS: reveal_title_slide:t reveal_width:-1
#+REVEAL_MARGIN: -1
#+REVEAL_MIN_SCALE: -1
#+REVEAL_MAX_SCALE: -1
#+REVEAL_ROOT: ../reveal.js-master
#+REVEAL_TRANS: cube
#+REVEAL_SPEED: default
#+REVEAL_THEME: solarized
#+REVEAL_EXTRA_CSS:
#+REVEAL_EXTRA_JS:
#+REVEAL_HLEVEL: 2
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1><h2>%a</h2><h2>%e</h2><h2>%d</h2>
#+REVEAL_TITLE_SLIDE_BACKGROUND:
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE:
#+REVEAL_TITLE_SLIDE_BACKGROUND_REPEAT:
#+REVEAL_TITLE_SLIDE_BACKGROUND_TRANSITION:
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+REVEAL_PREAMBLE:
#+REVEAL_HEAD_PREAMBLE:
#+REVEAL_POSTAMBLE:
#+REVEAL_MULTIPLEX_ID:
#+REVEAL_MULTIPLEX_SECRET:
#+REVEAL_MULTIPLEX_URL:
#+REVEAL_MULTIPLEX_SOCKETIO_URL:
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+REVEAL_PLUGINS:
#+REVEAL_DEFAULT_FRAG_STYLE:
#+REVEAL_INIT_SCRIPT:

#+TITLE: Conceptos Avanzados en Lenguajes de Programación
#+DATE:  <2016-08-16 mar>
#+AUTHOR: Claudio Vaucheret / Marcelo Amaolo
#+EMAIL: cv@fi.uncoma.edu.ar / marcelo.amaolo@fi.uncoma.edu.ar

* Introducción

** Razones para estudiar Conceptos de Lenguajes de Programación
- Incrementa la habilidad para expresar ideas
- Mejora la capacidad de elegir el lenguaje apropiado
- Incrementa la capacidad de aprender nuevos lenguajes
- Mejora el entendimiento del funcionamiento interno del lenguaje
  (implementación)

** Dominios de Programación
- Aplicaciones Científicas
  - Gran número de computación de punto flotante
  - Fortran
- Aplicaciones Empresariales
  - Producción de Reportes, uso de números decimales y caracteres
  - Cobol
- Inteligencia Artificial
  - Manipulación simbólica (en lugar de números)
  - LISP
- Sistemas de Programación
  - Necesidad de eficiencia (debido al uso continuo)
  - C
- Software para la WEB
  - Colección ecléctica de lenguajes: maukup (e.g. HTML5), scripting
    (e.g. PHP), de propósito general (e.g. Java)

** Criterios de Evaluación de Lenguajes
- *Legibilidad*: la facilidad con la cual los programas pueden ser
  leídos y entendidos.
- *Escribilidad*: la facilidad con la cual un lenguaje puede ser usado
  para crear programas
- *Confiabilidad*: El grado en que el lenguaje funciona de acuerdo a
  sus especificaciones.
- *Costo*: de uso, compilación, mantenimiento etc.

*** Legibilidad
- Simplicidad
  - Un conjunto manejable de características y construcciones
  - Poca multiplicidad de características (medios de realizar la misma operación)
  - Minima sobrecarga de operadores
- Ortogonalidad
  - Un conjunto relativamente pequeño de construcciones primitivas que
    puedan ser combinadas en un numero pequeño de modos
  - Toda posible combinación sea legal.
- Sentencas de Control
  - La presencia de bien conocidas estructuras de control
- Tipos de Datos y Estructuras
  - La presencia de facilidades adecuadas para definir estructuras de datos
- Consideraciones sintácticas
  - Composición flexible de identificadores
  - Palabras especiales y métodos para formar sentencias compuestas
  - Construcciones autodescriptivas, palabras reservadas
    significativas

*** Escribilidad

- Simplicidad y ortogonalidad
  - Pocas constucciones, numero pequeño de primitivas y pocas reglas
    para combinarlas.
- Soporte para la abstracción
  - La habilidad para definir y usar estructuras complejas o
    operaciones de modo que los detalles puedan ser ignorados
- Expresibilidad
  - Un conjunto conveniente de modos de especificar operaciones
  - Ejemplo: La inclusión de la sentencia *FOR* en  muchos lenguajes modernos


* Evolución de los Lenguajes de Programación

** Lenguajes de Programación

[[file:evolleng.png]]

** Evolución de los primeros lenguajes
 #+ATTR_REVEAL: :frag (roll-in)

**  Konrad Zuze's language de la computadora Z4.

*** Zuse's Plankalkül

- Desarrollado en 1945
- Nunca implementado
- Su descripción fue publicada en 1972.
- Tipos de datos: bit, Integer and float tipos compuestos.
- arreglos y registros

#+BEGIN_SRC lisp
  | A + 1 => A
V | 4        5
S | 1.n      1.n
#+END_SRC




** Codigo Máquina: pseudocodigos ¿?

*** Escribir en lenguaje máquina

- poco legibles y modificables
- sin indices ni punto flotante
- direccionamiento absoluto

*** Shorte Code Mauchly (1949) 

- computadora BINAC 
- Expresiones eran codificadas de izquierda a derecha
- Ejemplos de operaciones:

#+BEGIN_SRC lisp
01 - 06 abs value 1n (n+2)nd power
02 ) 07 +         2n (n+2)nd root
03 = 08 pause     4n if <= n
04 / 09 (         58 print and tab
#+END_SRC

La sentencia X0 = SQRT(ABS(Y0)) podria ser codificada como:

#+BEGIN_SRC lisp
00 X0 03 20 06 Y0
#+END_SRC

*** Speedcoding

- Desarrollado por John Backus en 1954 para IBM 701
- Pseudo operaciones para funciones aritméticas y matemtaticas
  - bifurcación condicional e incondicional
  - registros autoincrementales para acceso a arreglos
  - 4.2 millisegundos la instruccion de suma y 700 palabras para el programa
  - 2 semanas de programación en pocas horas!!!

*** Otros sistemas relacionados

- Sistema de "compilación" UNIVAC
  - Desarrollado por el equipo de Brace Hopper
  - Pseudocodigo expandido en código máquina (macros)
- David J Wheeler (Universidad de Cambridge) (1950)
  - Desarrollo un método de usar bloques de direccionamiento reubicables
- Wilkes (1951-1957) desarrollo lenguaje /assembler/ con estas ideas


** IBM 704 y Fortran

*** Fortan 
- Fortran 0: 1954 - no implementado
- Fortran 1 1957
  - Diseñado para la nueva IBM 704, que tenía registros y aritmética
    de punto flotante
  - Entorno de Desarrollo
    - Las Computadoras eran pequeñas y confiables
    - Las aplicaciones eran científicas
    - Sin metodología ni herramientas de programación
    - Importancia en *eficiencia*

*** Proceso de Diseño
- El impacto del entorno en el diseño de Fortran
  - Sin necesidad de almacenamiento dinámico
  - Necesidad de un buen manejo de arreglos y ciclos
  - Sin manejo de cadenas, aritmética decimal o herramientas de
    entrada/salida (de uso comercial)

*** Fortran I
- Primera versión implementada de Fortrand
  - Nombres hasta 6 caracteres
  - Ciclos iterativos con post condición (*DO*)
  - I/O formateada
  - subprogramas definidos por el usuario
  - Sentencias condicionales de tres modos (*IF* aritmético)
  - sentencias sin tipo de datos

*** Fortran I
- Primera versión implementada
  - Sin compilación separada
  - Compilador distribuido en Abril de 1957,
  - Programas de mas de 400 lineas raramente compilaban correctamente,
    principalmente debido a la pobre confiabilidad de la IBM 704
  - La Codificación era verdaderamente rápida
  - Rapidamente se volvió ampliamente usado

*** Fortran II
- Distribuido en 1958
  - Compilación independiente
  - Se corrigieron muchos errores

*** Fortran IV
- Desarrollado durante 1960-1962
  - Declaración explicita de tipos
  - Sentencia de selección lógica
  - Nombres de programas podian se pasados como parámetros
  - ANSI standard en 1966

*** Fortran 77
- Se volvió el nuevo estandard en 1978
  - Manejo de cadenas de caracteres
  - sentencia de control de ciclos lógico
  - sentencia *IF-THEN-ELSE*

*** Fortran 90
- Con los mas significativos cámbios desde el Fortran 77
  - Módulos
  - Arreglos dinámicos
  - Punteros
  - Recursión
  - sentencia *CASE*
  - chequeo de tipos en los parametros

*** Evaluación de Fortran
- Compiladores altamente optimizados (todas las versiones anteriores a 90)
  - Los tipos y almacenamiento de todas las variables eran fijas antes del
    tiempo de ejecución.
- Dramaticamente cambió para siempre el modo en que las computadoras
  fueron usadas
- Caracterizados como la /lingua franca/ del mundo de la computación


** Programación Funcional: LISP

** Primera sofisticación: ALGOL 60

** Aplicaciones Comerciales: COBOL

** Comienzo de tiempo compartido: BASIC 
